{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1554167517146},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1554167517144},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1554167517148},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1554167517145},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1554167517148},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1554167517149},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1554167517150},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1554167517143},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1554167517155},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1554167517151},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1554167517156},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1554167517312},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1554167517182},{"_id":"source/about/index.md","hash":"8999837b4800a41c7c589985f4a2d090113f92e3","modified":1557374530239},{"_id":"source/tags/index.md","hash":"31f4cada5795e238315c45691fd92a2e9af5082b","modified":1554167516997},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1554167517152},{"_id":"themes/next/_config.yml","hash":"13205328d8fad405c9f606b53b5de3fa56627c3c","modified":1554289136081},{"_id":"source/_posts/flutter-movie.md","hash":"f99e647cca95c57e624b81fe63c78e3af49aa0b6","modified":1564384010596},{"_id":"source/_posts/ant-design-pro-tips.md","hash":"4698cb88e95ebd0da9000cdc0dfd5f7264e689a7","modified":1554167516993},{"_id":"source/_posts/JSON-stringify.md","hash":"aee00716a2a90945b66039287f3d96efc02ba00f","modified":1563154900417},{"_id":"source/_posts/extensions-for-chrome.md","hash":"1d71c73c1350e2f1db49baec76bced85d1a81774","modified":1554883484557},{"_id":"source/_posts/hello-world.md","hash":"d5fbd854a0bc2e8efe58c3202d7a12039f748abb","modified":1554278783473},{"_id":"source/_posts/git-tips.md","hash":"55d4586e1511d108f5073067cbdaf3d4983d71d4","modified":1555054691962},{"_id":"source/_posts/lol.md","hash":"28a5b47dd63e589e33452eb2f3e73742e31d35d1","modified":1564384010597},{"_id":"source/_posts/flutter-awesome-list.md","hash":"b36c8f88bca25187f6d7a85f8f1e25e003fb2a0a","modified":1563154900421},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1554167517159},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1554167517160},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1554167517157},{"_id":"source/_posts/操作URL的黑科技.md","hash":"c4ea61b04ea6882df271337776f5d43c7318df94","modified":1563154900428},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1554167517161},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1554167517163},{"_id":"source/_posts/flutter-scroll-animation.md","hash":"11acef1d149e5bf6b1565551a4f0d562410f2c6a","modified":1563154900425},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1554167517165},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1554167517184},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1554167517185},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1554167517186},{"_id":"themes/next/languages/fr.yml","hash":"0393558717065293bdf732866471cebb0c884f6a","modified":1554167517187},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1554167517188},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1554167517160},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1554167517164},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1554167517166},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1554167517192},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1554167517193},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1554167517192},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1554167517191},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1554167517189},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1554167517194},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1554167517195},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1554167517197},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1554167517198},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1554167517196},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1554167517199},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1554167517200},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1554167517306},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1554167517308},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1554167517307},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1554167517310},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1554167517310},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1554167517309},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1554167517317},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1554167517311},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1554167517319},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1554167517206},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1554167517524},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1554167517525},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517478},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1554167517169},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1554167517167},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1554167517170},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1554167517171},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1554167517174},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1554167517173},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1554167517525},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1554167517177},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1554167517175},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1554167517179},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1554167517180},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1554167517178},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1554167517203},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554167517204},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554167517205},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1554167517176},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1554167517181},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1554167517210},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1554167517201},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1554167517214},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1554167517215},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1554167517229},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1554167517229},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1554167517246},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1554167517247},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1554167517248},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1554167517249},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1554167517257},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1554167517212},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1554167517275},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1554167517276},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1554167517277},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1554167517258},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1554167517294},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1554167517295},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1554167517296},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1554167517297},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1554167517298},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1554167517298},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1554167517211},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1554167517305},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1554167517314},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1554167517316},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1554167517317},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1554167517320},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1554167517321},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1554167517322},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1554167517323},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1554167517324},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1554167517325},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1554167517327},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1554167517329},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1554167517328},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1554167517330},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1554167517331},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1554167517332},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1554167517216},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1554167517299},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1554167517289},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554167517484},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554167517481},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554167517482},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554167517486},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554167517480},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554167517490},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554167517491},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554167517483},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554167517492},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554167517487},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554167517489},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554167517488},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554167517493},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554167517498},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554167517492},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554167517496},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554167517494},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1554167517500},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1554167517501},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1554167517503},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554167517495},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1554167517502},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1554167517505},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1554167517509},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1554167517506},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1554167517504},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1554167517510},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517440},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517441},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517443},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517474},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554167517476},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1554167517477},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1554167517208},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1554167517209},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1554167517217},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1554167517218},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1554167517223},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1554167517222},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1554167517224},{"_id":"themes/next/source/js/utils.js","hash":"6a07990fe4374f8485b7dfa5797d029d8c8a024d","modified":1554167517511},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1554167517227},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1554167517220},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1554167517226},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1554167517225},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1554167517236},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1554167517238},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1554167517239},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1554167517240},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1554167517241},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1554167517242},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1554167517235},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1554167517232},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1554167517243},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1554167517250},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1554167517252},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1554167517253},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1554167517255},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1554167517256},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1554167517260},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1554167517262},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1554167517231},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1554167517264},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1554167517265},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1554167517263},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1554167517267},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1554167517268},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1554167517270},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1554167517261},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1554167517272},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1554167517273},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1554167517266},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1554167517278},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1554167517271},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1554167517280},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1554167517244},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1554167517279},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1554167517283},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1554167517287},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1554167517274},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1554167517291},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1554167517292},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1554167517282},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1554167517281},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1554167517302},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1554167517301},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1554167517437},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1554167517293},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1554167517439},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1554167517442},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1554167517288},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1554167517473},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1554167517303},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"c5513b49daceeac0909ccfc8c9feb27ac4d0ac85","modified":1554167517442},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1554167517508},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1554167517509},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1554167517474},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1554167517472},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1554167517520},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1554167517521},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1554167517476},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1554167517519},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"13dfba1fc57ef39e7f2bbe15fe73bca1e47880a9","modified":1554167517336},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"698e4d6d894dd3db14fca5695b84bafcc4b1e4aa","modified":1554167517337},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1554167517339},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1554167517340},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1554167517389},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1554167517429},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1554167517338},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1554167517388},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1554167517366},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1554167517431},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1554167517432},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1554167517435},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"12d23b0a50d12b687886ae8f1ff2073e7313b914","modified":1554167517436},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"97d39280d8f48ae250bb7d0982b37b066e0461ff","modified":1554167517433},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1554167517458},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554167517461},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1554167517459},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1554167517462},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1554167517447},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1554167517448},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1554167517449},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1554167517450},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1554167517453},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1554167517450},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1554167517452},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1554167517465},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1554167517434},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1554167517445},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1554167517467},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1554167517468},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1554167517471},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1554167517469},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1554167517470},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1554167517460},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1554167517514},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1554167517517},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1554167517342},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1554167517345},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1554167517346},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1554167517346},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1554167517348},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1554167517350},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1554167517344},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1554167517355},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1554167517352},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1554167517351},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1554167517354},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1554167517356},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1554167517359},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1554167517347},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1554167517358},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1554167517365},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1554167517370},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1554167517372},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1554167517373},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1554167517376},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1554167517361},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1554167517371},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1554167517374},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1554167517379},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1554167517377},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1554167517380},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1554167517381},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1554167517383},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1554167517378},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1554167517379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1554167517390},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1554167517382},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1554167517393},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1554167517392},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1554167517394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1554167517395},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1554167517385},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"7af79cbbe4013f549799013b9d2146f61eafc85e","modified":1554167517397},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1554167517387},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1554167517399},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1554167517391},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1554167517402},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1554167517403},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1554167517404},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1554167517398},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1554167517406},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1554167517396},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1554167517417},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1554167517401},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1554167517405},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1554167517421},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1554167517422},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1554167517423},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1554167517416},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1554167517425},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1554167517426},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1554167517427},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1554167517428},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554167517464},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1554167517455},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554167517456},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1554167517419},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1554167517420},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1554167517424}],"Category":[{"name":"Javascript","_id":"cjyo234pk0004tot2j0yf4eua"}],"Data":[],"Page":[{"title":"标签","date":"2019-03-31T02:10:36.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-31 10:10:36\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-04-02T01:11:56.997Z","path":"tags/index.html","comments":1,"_id":"cjyo234hy0000tot2oenkqy1b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于小华","date":"2019-03-31T01:58:03.000Z","type":"about","_content":"\n我，一名在南京慢慢前进的程序员。\n在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。\n目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。\n\n常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。\n\n我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。","source":"about/index.md","raw":"---\ntitle: 关于小华\ndate: 2019-03-31 09:58:03\ntype: \"about\"\n---\n\n我，一名在南京慢慢前进的程序员。\n在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。\n目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。\n\n常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。\n\n我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。","updated":"2019-05-09T04:02:10.239Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyo234i00001tot2qb0guk0i","content":"<p>我，一名在南京慢慢前进的程序员。<br>在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。<br>目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。</p>\n<p>常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。</p>\n<p>我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我，一名在南京慢慢前进的程序员。<br>在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。<br>目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。</p>\n<p>常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。</p>\n<p>我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。</p>\n"}],"Post":[{"title":"Ant Design Pro 的一些小技巧","date":"2019-03-20T07:37:04.000Z","_content":"前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）\n\n\n# Tip1：怎么使用动态路由\n很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：\n- 找到文件src/models/menu.js\n- 在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）\n\n# Tip2： Provider和Content\n- [how-does-provider-and-connect-work-in-react](https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react)\n- [Context（中文）](https://zh-hans.reactjs.org/docs/context.html)\n- [Higher-Order Components（中文）](https://zh-hans.reactjs.org/docs/higher-order-components.html)\n\n# Tip3：生成动态路由\n每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。\n\n# Tip4：权限控制\n这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：\n【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】\n所以应该有以下的结构：\n- 用户管理 增删改查 分配角色\n- 角色管理 增删改查 分配菜单和权限\n- 菜单管理 增删改查\n- 权限管理 增删改查\n\n备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。\n\n\n","source":"_posts/ant-design-pro-tips.md","raw":"---\ntitle: Ant Design Pro 的一些小技巧\ndate: 2019-03-20 15:37:04\ntags: [react, ant-design]\ncategories: [Javascript]\n---\n前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）\n\n\n# Tip1：怎么使用动态路由\n很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：\n- 找到文件src/models/menu.js\n- 在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）\n\n# Tip2： Provider和Content\n- [how-does-provider-and-connect-work-in-react](https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react)\n- [Context（中文）](https://zh-hans.reactjs.org/docs/context.html)\n- [Higher-Order Components（中文）](https://zh-hans.reactjs.org/docs/higher-order-components.html)\n\n# Tip3：生成动态路由\n每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。\n\n# Tip4：权限控制\n这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：\n【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】\n所以应该有以下的结构：\n- 用户管理 增删改查 分配角色\n- 角色管理 增删改查 分配菜单和权限\n- 菜单管理 增删改查\n- 权限管理 增删改查\n\n备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。\n\n\n","slug":"ant-design-pro-tips","published":1,"updated":"2019-04-02T01:11:56.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234pb0002tot2cw4jb06a","content":"<p>前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）</p>\n<h1 id=\"Tip1：怎么使用动态路由\"><a href=\"#Tip1：怎么使用动态路由\" class=\"headerlink\" title=\"Tip1：怎么使用动态路由\"></a>Tip1：怎么使用动态路由</h1><p>很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：</p>\n<ul>\n<li>找到文件src/models/menu.js</li>\n<li>在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）</li>\n</ul>\n<h1 id=\"Tip2：-Provider和Content\"><a href=\"#Tip2：-Provider和Content\" class=\"headerlink\" title=\"Tip2： Provider和Content\"></a>Tip2： Provider和Content</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react\" target=\"_blank\" rel=\"noopener\">how-does-provider-and-connect-work-in-react</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context（中文）</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">Higher-Order Components（中文）</a></li>\n</ul>\n<h1 id=\"Tip3：生成动态路由\"><a href=\"#Tip3：生成动态路由\" class=\"headerlink\" title=\"Tip3：生成动态路由\"></a>Tip3：生成动态路由</h1><p>每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。</p>\n<h1 id=\"Tip4：权限控制\"><a href=\"#Tip4：权限控制\" class=\"headerlink\" title=\"Tip4：权限控制\"></a>Tip4：权限控制</h1><p>这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：<br>【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】<br>所以应该有以下的结构：</p>\n<ul>\n<li>用户管理 增删改查 分配角色</li>\n<li>角色管理 增删改查 分配菜单和权限</li>\n<li>菜单管理 增删改查</li>\n<li>权限管理 增删改查</li>\n</ul>\n<p>备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）</p>\n<h1 id=\"Tip1：怎么使用动态路由\"><a href=\"#Tip1：怎么使用动态路由\" class=\"headerlink\" title=\"Tip1：怎么使用动态路由\"></a>Tip1：怎么使用动态路由</h1><p>很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：</p>\n<ul>\n<li>找到文件src/models/menu.js</li>\n<li>在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）</li>\n</ul>\n<h1 id=\"Tip2：-Provider和Content\"><a href=\"#Tip2：-Provider和Content\" class=\"headerlink\" title=\"Tip2： Provider和Content\"></a>Tip2： Provider和Content</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react\" target=\"_blank\" rel=\"noopener\">how-does-provider-and-connect-work-in-react</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context（中文）</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">Higher-Order Components（中文）</a></li>\n</ul>\n<h1 id=\"Tip3：生成动态路由\"><a href=\"#Tip3：生成动态路由\" class=\"headerlink\" title=\"Tip3：生成动态路由\"></a>Tip3：生成动态路由</h1><p>每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。</p>\n<h1 id=\"Tip4：权限控制\"><a href=\"#Tip4：权限控制\" class=\"headerlink\" title=\"Tip4：权限控制\"></a>Tip4：权限控制</h1><p>这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：<br>【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】<br>所以应该有以下的结构：</p>\n<ul>\n<li>用户管理 增删改查 分配角色</li>\n<li>角色管理 增删改查 分配菜单和权限</li>\n<li>菜单管理 增删改查</li>\n<li>权限管理 增删改查</li>\n</ul>\n<p>备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。</p>\n"},{"title":"JSON.stringify","date":"2019-06-10T07:31:27.000Z","_content":"![](http://qiniu.tbmao.com/jsonlogo.png)\n> - 作者: 小华坚决上王者\n> - 建议阅读时间: 2 min\n> - [掘金地址](https://juejin.im/post/5d0b45866fb9a07ed136db0f)\n\n> JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来`美化输出`，先看下语法:\n\n```\nJSON.stringify(value[, replacer [, space]])\n```\n\n下面我列举了三个常用的例子，直接上代码\n\n### 普通用法\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj))\n\n// \"{\"a\":\"foo\",\"b\":\"bar\"}\"\n```\n\n### space传入数字\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, 2))\n\n/*\n{\n  \"a\": \"foo\",\n  \"b\": \"bar\"\n}\n*/\n```\n\n### space传入字符串\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, '--'))\n\n/*\n{\n--\"a\": \"foo\",\n--\"b\": \"bar\"\n}\n*/\n```\n\n### 一个典型的应用场景\n在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：\n\n``` javascript\nalert(obj);\n```\n效果却是这样的：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png)\n此时的你：\n\n![](http://qiniu.tbmao.com/jsontimg.jpg)\n\n后来，你使用了JSON.stringify的第三个参数：\n\n``` javascript\nalert(JSON.stringify(obj, null, 2));\n```\n结果自然就很通畅了：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png)\n\n怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。","source":"_posts/JSON-stringify.md","raw":"---\ntitle: JSON.stringify\ndate: 2019-06-10 15:31:27\ntags: javascript\n---\n![](http://qiniu.tbmao.com/jsonlogo.png)\n> - 作者: 小华坚决上王者\n> - 建议阅读时间: 2 min\n> - [掘金地址](https://juejin.im/post/5d0b45866fb9a07ed136db0f)\n\n> JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来`美化输出`，先看下语法:\n\n```\nJSON.stringify(value[, replacer [, space]])\n```\n\n下面我列举了三个常用的例子，直接上代码\n\n### 普通用法\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj))\n\n// \"{\"a\":\"foo\",\"b\":\"bar\"}\"\n```\n\n### space传入数字\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, 2))\n\n/*\n{\n  \"a\": \"foo\",\n  \"b\": \"bar\"\n}\n*/\n```\n\n### space传入字符串\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, '--'))\n\n/*\n{\n--\"a\": \"foo\",\n--\"b\": \"bar\"\n}\n*/\n```\n\n### 一个典型的应用场景\n在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：\n\n``` javascript\nalert(obj);\n```\n效果却是这样的：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png)\n此时的你：\n\n![](http://qiniu.tbmao.com/jsontimg.jpg)\n\n后来，你使用了JSON.stringify的第三个参数：\n\n``` javascript\nalert(JSON.stringify(obj, null, 2));\n```\n结果自然就很通畅了：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png)\n\n怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。","slug":"JSON-stringify","published":1,"updated":"2019-07-15T01:41:40.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234ph0003tot2376pmo6z","content":"<p><img src=\"http://qiniu.tbmao.com/jsonlogo.png\" alt></p>\n<blockquote>\n<ul>\n<li>作者: 小华坚决上王者</li>\n<li>建议阅读时间: 2 min</li>\n<li><a href=\"https://juejin.im/post/5d0b45866fb9a07ed136db0f\" target=\"_blank\" rel=\"noopener\">掘金地址</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来<code>美化输出</code>，先看下语法:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(value[, replacer [, space]])</span><br></pre></td></tr></table></figure>\n<p>下面我列举了三个常用的例子，直接上代码</p>\n<h3 id=\"普通用法\"><a href=\"#普通用法\" class=\"headerlink\" title=\"普通用法\"></a>普通用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"a\":\"foo\",\"b\":\"bar\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入数字\"><a href=\"#space传入数字\" class=\"headerlink\" title=\"space传入数字\"></a>space传入数字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">  \"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入字符串\"><a href=\"#space传入字符串\" class=\"headerlink\" title=\"space传入字符串\"></a>space传入字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"string\">'--'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">--\"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">--\"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个典型的应用场景\"><a href=\"#一个典型的应用场景\" class=\"headerlink\" title=\"一个典型的应用场景\"></a>一个典型的应用场景</h3><p>在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>效果却是这样的：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png\" alt><br>此时的你：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsontimg.jpg\" alt></p>\n<p>后来，你使用了JSON.stringify的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>结果自然就很通畅了：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png\" alt></p>\n<p>怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://qiniu.tbmao.com/jsonlogo.png\" alt></p>\n<blockquote>\n<ul>\n<li>作者: 小华坚决上王者</li>\n<li>建议阅读时间: 2 min</li>\n<li><a href=\"https://juejin.im/post/5d0b45866fb9a07ed136db0f\" target=\"_blank\" rel=\"noopener\">掘金地址</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来<code>美化输出</code>，先看下语法:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(value[, replacer [, space]])</span><br></pre></td></tr></table></figure>\n<p>下面我列举了三个常用的例子，直接上代码</p>\n<h3 id=\"普通用法\"><a href=\"#普通用法\" class=\"headerlink\" title=\"普通用法\"></a>普通用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"a\":\"foo\",\"b\":\"bar\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入数字\"><a href=\"#space传入数字\" class=\"headerlink\" title=\"space传入数字\"></a>space传入数字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">  \"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入字符串\"><a href=\"#space传入字符串\" class=\"headerlink\" title=\"space传入字符串\"></a>space传入字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"string\">'--'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">--\"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">--\"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个典型的应用场景\"><a href=\"#一个典型的应用场景\" class=\"headerlink\" title=\"一个典型的应用场景\"></a>一个典型的应用场景</h3><p>在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>效果却是这样的：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png\" alt><br>此时的你：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsontimg.jpg\" alt></p>\n<p>后来，你使用了JSON.stringify的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>结果自然就很通畅了：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png\" alt></p>\n<p>怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。</p>\n"},{"title":"炒鸡好用的浏览器插件","date":"2019-03-27T02:03:31.000Z","_content":"\n作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！\n\n## Console Importer\n 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。\n 用法：$i('lodash')，然后就可以使用lodash了\n\n ## Stream Video Downloader\n 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]\n\n## Google 翻译\n介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了\n\n## Adblock Plus\n介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。\n\n## Octotree\n介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美\n\n## 掘金\n介绍：一个帮助开发者成长的社区\n\n## FireShort\n介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任\n","source":"_posts/extensions-for-chrome.md","raw":"---\ntitle: 炒鸡好用的浏览器插件\ndate: 2019-03-27 10:03:31\ntags:\n    - 插件\n    - 浏览器\n    - Chrome\n---\n\n作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！\n\n## Console Importer\n 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。\n 用法：$i('lodash')，然后就可以使用lodash了\n\n ## Stream Video Downloader\n 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]\n\n## Google 翻译\n介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了\n\n## Adblock Plus\n介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。\n\n## Octotree\n介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美\n\n## 掘金\n介绍：一个帮助开发者成长的社区\n\n## FireShort\n介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任\n","slug":"extensions-for-chrome","published":1,"updated":"2019-04-10T08:04:44.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234pm0006tot2u583ze8o","content":"<p>作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！</p>\n<h2 id=\"Console-Importer\"><a href=\"#Console-Importer\" class=\"headerlink\" title=\"Console Importer\"></a>Console Importer</h2><p> 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。<br> 用法：$i(‘lodash’)，然后就可以使用lodash了</p>\n<h2 id=\"Stream-Video-Downloader\"><a href=\"#Stream-Video-Downloader\" class=\"headerlink\" title=\"Stream Video Downloader\"></a>Stream Video Downloader</h2><p> 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]</p>\n<h2 id=\"Google-翻译\"><a href=\"#Google-翻译\" class=\"headerlink\" title=\"Google 翻译\"></a>Google 翻译</h2><p>介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了</p>\n<h2 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a>Adblock Plus</h2><p>介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。</p>\n<h2 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a>Octotree</h2><p>介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美</p>\n<h2 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a>掘金</h2><p>介绍：一个帮助开发者成长的社区</p>\n<h2 id=\"FireShort\"><a href=\"#FireShort\" class=\"headerlink\" title=\"FireShort\"></a>FireShort</h2><p>介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！</p>\n<h2 id=\"Console-Importer\"><a href=\"#Console-Importer\" class=\"headerlink\" title=\"Console Importer\"></a>Console Importer</h2><p> 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。<br> 用法：$i(‘lodash’)，然后就可以使用lodash了</p>\n<h2 id=\"Stream-Video-Downloader\"><a href=\"#Stream-Video-Downloader\" class=\"headerlink\" title=\"Stream Video Downloader\"></a>Stream Video Downloader</h2><p> 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]</p>\n<h2 id=\"Google-翻译\"><a href=\"#Google-翻译\" class=\"headerlink\" title=\"Google 翻译\"></a>Google 翻译</h2><p>介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了</p>\n<h2 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a>Adblock Plus</h2><p>介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。</p>\n<h2 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a>Octotree</h2><p>介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美</p>\n<h2 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a>掘金</h2><p>介绍：一个帮助开发者成长的社区</p>\n<h2 id=\"FireShort\"><a href=\"#FireShort\" class=\"headerlink\" title=\"FireShort\"></a>FireShort</h2><p>介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任</p>\n"},{"title":"Hello World","date":"2019-03-20T02:00:30.000Z","_content":"终于搭建了自己的技术博客，选来选去，最后还是用了hexo\n\n## 快速开始\n\n### 新建文章\n\n``` bash\n$ hexo new \"文章名字\"\n```\n\n更多: [writing](https://hexo.io/docs/writing.html)\n\n### 开启本地服务器\n\n``` bash\n$ hexo server\n```\n\n更多: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署\n\n``` bash\n$ hexo deploy\n```\n\n更多: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-03-20 10:00:30\n---\n终于搭建了自己的技术博客，选来选去，最后还是用了hexo\n\n## 快速开始\n\n### 新建文章\n\n``` bash\n$ hexo new \"文章名字\"\n```\n\n更多: [writing](https://hexo.io/docs/writing.html)\n\n### 开启本地服务器\n\n``` bash\n$ hexo server\n```\n\n更多: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署\n\n``` bash\n$ hexo deploy\n```\n\n更多: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-04-03T08:06:23.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234po0007tot2f86zhcz5","content":"<p>终于搭建了自己的技术博客，选来选去，最后还是用了hexo</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章名字\"</span></span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"开启本地服务器\"><a href=\"#开启本地服务器\" class=\"headerlink\" title=\"开启本地服务器\"></a>开启本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于搭建了自己的技术博客，选来选去，最后还是用了hexo</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章名字\"</span></span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"开启本地服务器\"><a href=\"#开启本地服务器\" class=\"headerlink\" title=\"开启本地服务器\"></a>开启本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"git无敌攻略","date":"2019-04-12T01:14:15.000Z","_content":"\n### 用户信息\n配置用户个人的用户名和电子邮箱地址：\n``` git\ngit config --global user.name \"xucaihua\"\ngit config --global user.email 158972928@qq.com\n```\n如果用了 --global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 --global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。\n\n### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` git\ngit config --list\n```\n也可以只查看某个变量，像这样：\n``` git\ngit config user.name\n```\n\n### 创建仓库\nGit 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：\n``` git\ngit init\n```\n\n### 添加到暂存区和提交\n初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` git\ngit add *.js\ngit add README\ngit commit -m \"初始化\"\n```\n以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：\n``` git\ngit add .\ngit commit -m \"初始化\"\n```\n\n### git clone\n我们使用 git clone 从现有 Git 仓库中拷贝项目，\n``` git\ngit clone <repo>\n```\n如果想指定其他目录名，而不是使用默认，使用以下命令：\n``` git\ngit clone <repo> <directory>\n```\n\n### 查看状态\n``` git\ngit status\n```\n\n### 缩写 add 和commit\n如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：\n``` git\ngit commit -am \"msg\"\n```\n\n### 分支管理\n创建分支：\n``` git\ngit branch (branchname)\n```\n\n切换分支：\n``` git\ngit checkout (branchname)\n```\n\n创建并切换分支：\n``` git\ngit checkout -b (branchname)\n```\n\n合并分支：\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n``` git\ngit merge --no-ff (branchname)\n```\n\n\n列出分支：\n``` git\ngit branch\n```\n\n删除分支：\n``` git\ngit branch -d (branchname)\n```\n\n> 更高级的分支策略，建议看看阮一峰的文章：[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html)\n\n### 查看提交历史\n``` git\ngit log\n// 单行显示\ngit log --oneline\n// 拓扑图\ngit log --oneline --graph\n// 倒序\ngit log --oneline --reverse\n// 指定用户\ngit log --author=xucaihua --oneline -5\n```\n\n### 标签\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n比如说，项目发布一个\"1.0\"版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）\"v1.0\"的标签。\n``` git\ngit tag v1.0\n```\n为某次提交追加标签\n``` git\ngit tag v1.0 654gfg9\n```\n使用git log 查看标签\n``` git\ngit log --oneline --decorate --graph\n```\n查看所有标签\n``` git\ngit tag\n```\n\n### 添加远程库\n``` git\ngit remote add [shortname] [url]\n```\n\n例子：提交到 Github\n``` git\ngit remote add origin git@github.com:xxx.git\ngit push -u origin master\n```\n查看当前的远程库\n``` git\ngit remote\ngit remote -v\n```\n\n\n","source":"_posts/git-tips.md","raw":"---\ntitle: git无敌攻略\ndate: 2019-04-12 09:14:15\ntags:\n    - git\n---\n\n### 用户信息\n配置用户个人的用户名和电子邮箱地址：\n``` git\ngit config --global user.name \"xucaihua\"\ngit config --global user.email 158972928@qq.com\n```\n如果用了 --global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 --global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。\n\n### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` git\ngit config --list\n```\n也可以只查看某个变量，像这样：\n``` git\ngit config user.name\n```\n\n### 创建仓库\nGit 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：\n``` git\ngit init\n```\n\n### 添加到暂存区和提交\n初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` git\ngit add *.js\ngit add README\ngit commit -m \"初始化\"\n```\n以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：\n``` git\ngit add .\ngit commit -m \"初始化\"\n```\n\n### git clone\n我们使用 git clone 从现有 Git 仓库中拷贝项目，\n``` git\ngit clone <repo>\n```\n如果想指定其他目录名，而不是使用默认，使用以下命令：\n``` git\ngit clone <repo> <directory>\n```\n\n### 查看状态\n``` git\ngit status\n```\n\n### 缩写 add 和commit\n如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：\n``` git\ngit commit -am \"msg\"\n```\n\n### 分支管理\n创建分支：\n``` git\ngit branch (branchname)\n```\n\n切换分支：\n``` git\ngit checkout (branchname)\n```\n\n创建并切换分支：\n``` git\ngit checkout -b (branchname)\n```\n\n合并分支：\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n``` git\ngit merge --no-ff (branchname)\n```\n\n\n列出分支：\n``` git\ngit branch\n```\n\n删除分支：\n``` git\ngit branch -d (branchname)\n```\n\n> 更高级的分支策略，建议看看阮一峰的文章：[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html)\n\n### 查看提交历史\n``` git\ngit log\n// 单行显示\ngit log --oneline\n// 拓扑图\ngit log --oneline --graph\n// 倒序\ngit log --oneline --reverse\n// 指定用户\ngit log --author=xucaihua --oneline -5\n```\n\n### 标签\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n比如说，项目发布一个\"1.0\"版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）\"v1.0\"的标签。\n``` git\ngit tag v1.0\n```\n为某次提交追加标签\n``` git\ngit tag v1.0 654gfg9\n```\n使用git log 查看标签\n``` git\ngit log --oneline --decorate --graph\n```\n查看所有标签\n``` git\ngit tag\n```\n\n### 添加远程库\n``` git\ngit remote add [shortname] [url]\n```\n\n例子：提交到 Github\n``` git\ngit remote add origin git@github.com:xxx.git\ngit push -u origin master\n```\n查看当前的远程库\n``` git\ngit remote\ngit remote -v\n```\n\n\n","slug":"git-tips","published":1,"updated":"2019-04-12T07:38:11.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234pp0008tot25mr9ygs4","content":"<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p>配置用户个人的用户名和电子邮箱地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xucaihua&quot;</span><br><span class=\"line\">git config --global user.email 158972928@qq.com</span><br></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 –global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。</p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></p>\n<p>也可以只查看某个变量，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加到暂存区和提交\"><a href=\"#添加到暂存区和提交\" class=\"headerlink\" title=\"添加到暂存区和提交\"></a>添加到暂存区和提交</h3><p>初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.js</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>我们使用 git clone 从现有 Git 仓库中拷贝项目，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果想指定其他目录名，而不是使用默认，使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩写-add-和commit\"><a href=\"#缩写-add-和commit\" class=\"headerlink\" title=\"缩写 add 和commit\"></a>缩写 add 和commit</h3><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;msg&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>创建分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>合并分支：<br>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>列出分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>删除分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d (branchname)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更高级的分支策略，建议看看阮一峰的文章：<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a></p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">// 单行显示</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\">// 拓扑图</span><br><span class=\"line\">git log --oneline --graph</span><br><span class=\"line\">// 倒序</span><br><span class=\"line\">git log --oneline --reverse</span><br><span class=\"line\">// 指定用户</span><br><span class=\"line\">git log --author=xucaihua --oneline -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。<br>比如说，项目发布一个”1.0”版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure></p>\n<p>为某次提交追加标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0 654gfg9</span><br></pre></td></tr></table></figure></p>\n<p>使用git log 查看标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate --graph</span><br></pre></td></tr></table></figure></p>\n<p>查看所有标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>例子：提交到 Github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:xxx.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>查看当前的远程库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p>配置用户个人的用户名和电子邮箱地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xucaihua&quot;</span><br><span class=\"line\">git config --global user.email 158972928@qq.com</span><br></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 –global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。</p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></p>\n<p>也可以只查看某个变量，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加到暂存区和提交\"><a href=\"#添加到暂存区和提交\" class=\"headerlink\" title=\"添加到暂存区和提交\"></a>添加到暂存区和提交</h3><p>初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.js</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>我们使用 git clone 从现有 Git 仓库中拷贝项目，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果想指定其他目录名，而不是使用默认，使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩写-add-和commit\"><a href=\"#缩写-add-和commit\" class=\"headerlink\" title=\"缩写 add 和commit\"></a>缩写 add 和commit</h3><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;msg&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>创建分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>合并分支：<br>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>列出分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>删除分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d (branchname)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更高级的分支策略，建议看看阮一峰的文章：<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a></p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">// 单行显示</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\">// 拓扑图</span><br><span class=\"line\">git log --oneline --graph</span><br><span class=\"line\">// 倒序</span><br><span class=\"line\">git log --oneline --reverse</span><br><span class=\"line\">// 指定用户</span><br><span class=\"line\">git log --author=xucaihua --oneline -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。<br>比如说，项目发布一个”1.0”版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure></p>\n<p>为某次提交追加标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0 654gfg9</span><br></pre></td></tr></table></figure></p>\n<p>使用git log 查看标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate --graph</span><br></pre></td></tr></table></figure></p>\n<p>查看所有标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>例子：提交到 Github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:xxx.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>查看当前的远程库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n"},{"title":"使用flutter打造炫酷的list","date":"2019-06-13T05:04:40.000Z","_content":"\n使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。\n\n<img src=\"http://qiniu.tbmao.com/awesomeList.gif\">\n\n样式还是很漂亮的，下面我们一步一步完成这个小项目。\n### 开发前准备\n- 我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用\n``` yaml\nassets:\n   - assets/images/\n```\n- 需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理\n``` dart\n    colors  # 颜色\n    data  # list的数据\n    # ...\n```\n\n### appBar部分\n- appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。\n- 需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:\n``` dart\nScaffold(\n    appBar: AppBar(\n    backgroundColor: Colors.transparent,\n    elevation: 0,\n    title: Text(\n        'flutter awesome list',\n        style: TextStyle(\n        color: Colors.white,\n        ),\n    ),\n    ),\n    body: HomeBody(),\n);\n```\n\n### Banner部分\n- 我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度\n- 下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：\n``` dart\nclass MyClipper extends CustomClipper<Path> {\n  @override\n  Path getClip(Size size) {\n    Path p = Path();\n    p.lineTo(size.width, 0.0);\n    p.lineTo(size.width, size.height / 4.75);\n    p.lineTo(0.0, size.height / 3.75);\n    p.close();\n    return p;\n  }\n\n  @override\n  bool shouldReclip(CustomClipper oldClipper) {\n    return true;\n  }\n}\n```\n- 用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：\n``` dart\nListTile(\n    leading: CircleAvatar(\n    backgroundImage: NetworkImage(CONSTANT.userAvatar),\n    ),\n    title: Text(\n    CONSTANT.userName,\n    style: CONSTANT.defaultTextStyle,\n    textScaleFactor: 1.5,\n    ),\n    subtitle: Text(\n    CONSTANT.userProfile,\n    style: CONSTANT.defaultTextStyle,\n    ),\n)\n```\n\n### 列表展示部分\n- 列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem\n- 我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面\n- 图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷\n``` dart\nHero(\n    tag: index,\n    child: FadeInImage(\n        image: NetworkImage(data.image),\n        fit: BoxFit.cover,\n        placeholder: AssetImage('assets/images/loading.gif'),\n    ),\n)\n```\n\n### 详情页面\n最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容\n\n\n### 结尾\n- 文章中没有张贴全部代码，感兴趣的同学可以看下源码[xch1029/awesomelist](https://github.com/xch1029/awesomelist)\n- [掘金](https://juejin.im/post/5d0203ca5188256aa76bc38e)\n- [简书](https://www.jianshu.com/p/a7b902b9af88)\n- [颜色生成工具 来自这里](https://colorsupplyyy.com/app)\n- [图片 来自这里](https://picsum.photos/)\n- 受启发于 [FlutterAwesomeList](https://github.com/samarthagarwal/FlutterAwesomeList)","source":"_posts/flutter-awesome-list.md","raw":"---\ntitle: 使用flutter打造炫酷的list\ndate: 2019-06-13 13:04:40\ntags: [flutter, UI]\n---\n\n使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。\n\n<img src=\"http://qiniu.tbmao.com/awesomeList.gif\">\n\n样式还是很漂亮的，下面我们一步一步完成这个小项目。\n### 开发前准备\n- 我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用\n``` yaml\nassets:\n   - assets/images/\n```\n- 需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理\n``` dart\n    colors  # 颜色\n    data  # list的数据\n    # ...\n```\n\n### appBar部分\n- appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。\n- 需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:\n``` dart\nScaffold(\n    appBar: AppBar(\n    backgroundColor: Colors.transparent,\n    elevation: 0,\n    title: Text(\n        'flutter awesome list',\n        style: TextStyle(\n        color: Colors.white,\n        ),\n    ),\n    ),\n    body: HomeBody(),\n);\n```\n\n### Banner部分\n- 我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度\n- 下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：\n``` dart\nclass MyClipper extends CustomClipper<Path> {\n  @override\n  Path getClip(Size size) {\n    Path p = Path();\n    p.lineTo(size.width, 0.0);\n    p.lineTo(size.width, size.height / 4.75);\n    p.lineTo(0.0, size.height / 3.75);\n    p.close();\n    return p;\n  }\n\n  @override\n  bool shouldReclip(CustomClipper oldClipper) {\n    return true;\n  }\n}\n```\n- 用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：\n``` dart\nListTile(\n    leading: CircleAvatar(\n    backgroundImage: NetworkImage(CONSTANT.userAvatar),\n    ),\n    title: Text(\n    CONSTANT.userName,\n    style: CONSTANT.defaultTextStyle,\n    textScaleFactor: 1.5,\n    ),\n    subtitle: Text(\n    CONSTANT.userProfile,\n    style: CONSTANT.defaultTextStyle,\n    ),\n)\n```\n\n### 列表展示部分\n- 列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem\n- 我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面\n- 图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷\n``` dart\nHero(\n    tag: index,\n    child: FadeInImage(\n        image: NetworkImage(data.image),\n        fit: BoxFit.cover,\n        placeholder: AssetImage('assets/images/loading.gif'),\n    ),\n)\n```\n\n### 详情页面\n最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容\n\n\n### 结尾\n- 文章中没有张贴全部代码，感兴趣的同学可以看下源码[xch1029/awesomelist](https://github.com/xch1029/awesomelist)\n- [掘金](https://juejin.im/post/5d0203ca5188256aa76bc38e)\n- [简书](https://www.jianshu.com/p/a7b902b9af88)\n- [颜色生成工具 来自这里](https://colorsupplyyy.com/app)\n- [图片 来自这里](https://picsum.photos/)\n- 受启发于 [FlutterAwesomeList](https://github.com/samarthagarwal/FlutterAwesomeList)","slug":"flutter-awesome-list","published":1,"updated":"2019-07-15T01:41:40.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234pr000atot29r0xjlny","content":"<p>使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。</p>\n<p><img src=\"http://qiniu.tbmao.com/awesomeList.gif\"></p>\n<p>样式还是很漂亮的，下面我们一步一步完成这个小项目。</p>\n<h3 id=\"开发前准备\"><a href=\"#开发前准备\" class=\"headerlink\" title=\"开发前准备\"></a>开发前准备</h3><ul>\n<li><p>我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assets:</span></span><br><span class=\"line\"><span class=\"bullet\">   -</span> <span class=\"string\">assets/images/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors  # 颜色</span><br><span class=\"line\">data  # list的数据</span><br><span class=\"line\"># ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"appBar部分\"><a href=\"#appBar部分\" class=\"headerlink\" title=\"appBar部分\"></a>appBar部分</h3><ul>\n<li>appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。</li>\n<li>需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(</span><br><span class=\"line\">    appBar: AppBar(</span><br><span class=\"line\">    backgroundColor: Colors.transparent,</span><br><span class=\"line\">    elevation: <span class=\"number\">0</span>,</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">        <span class=\"string\">'flutter awesome list'</span>,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: HomeBody(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Banner部分\"><a href=\"#Banner部分\" class=\"headerlink\" title=\"Banner部分\"></a>Banner部分</h3><ul>\n<li>我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度</li>\n<li><p>下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClipper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomClipper</span>&lt;<span class=\"title\">Path</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Path getClip(Size size) &#123;</span><br><span class=\"line\">    Path p = Path();</span><br><span class=\"line\">    p.lineTo(size.width, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    p.lineTo(size.width, size.height / <span class=\"number\">4.75</span>);</span><br><span class=\"line\">    p.lineTo(<span class=\"number\">0.0</span>, size.height / <span class=\"number\">3.75</span>);</span><br><span class=\"line\">    p.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReclip(CustomClipper oldClipper) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListTile(</span><br><span class=\"line\">    leading: CircleAvatar(</span><br><span class=\"line\">    backgroundImage: NetworkImage(CONSTANT.userAvatar),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">    CONSTANT.userName,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    textScaleFactor: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    subtitle: Text(</span><br><span class=\"line\">    CONSTANT.userProfile,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"列表展示部分\"><a href=\"#列表展示部分\" class=\"headerlink\" title=\"列表展示部分\"></a>列表展示部分</h3><ul>\n<li>列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem</li>\n<li>我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面</li>\n<li>图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">    tag: index,</span><br><span class=\"line\">    child: FadeInImage(</span><br><span class=\"line\">        image: NetworkImage(data.image),</span><br><span class=\"line\">        fit: BoxFit.cover,</span><br><span class=\"line\">        placeholder: AssetImage(<span class=\"string\">'assets/images/loading.gif'</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"详情页面\"><a href=\"#详情页面\" class=\"headerlink\" title=\"详情页面\"></a>详情页面</h3><p>最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><ul>\n<li>文章中没有张贴全部代码，感兴趣的同学可以看下源码<a href=\"https://github.com/xch1029/awesomelist\" target=\"_blank\" rel=\"noopener\">xch1029/awesomelist</a></li>\n<li><a href=\"https://juejin.im/post/5d0203ca5188256aa76bc38e\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://www.jianshu.com/p/a7b902b9af88\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://colorsupplyyy.com/app\" target=\"_blank\" rel=\"noopener\">颜色生成工具 来自这里</a></li>\n<li><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener\">图片 来自这里</a></li>\n<li>受启发于 <a href=\"https://github.com/samarthagarwal/FlutterAwesomeList\" target=\"_blank\" rel=\"noopener\">FlutterAwesomeList</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。</p>\n<p><img src=\"http://qiniu.tbmao.com/awesomeList.gif\"></p>\n<p>样式还是很漂亮的，下面我们一步一步完成这个小项目。</p>\n<h3 id=\"开发前准备\"><a href=\"#开发前准备\" class=\"headerlink\" title=\"开发前准备\"></a>开发前准备</h3><ul>\n<li><p>我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assets:</span></span><br><span class=\"line\"><span class=\"bullet\">   -</span> <span class=\"string\">assets/images/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors  # 颜色</span><br><span class=\"line\">data  # list的数据</span><br><span class=\"line\"># ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"appBar部分\"><a href=\"#appBar部分\" class=\"headerlink\" title=\"appBar部分\"></a>appBar部分</h3><ul>\n<li>appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。</li>\n<li>需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(</span><br><span class=\"line\">    appBar: AppBar(</span><br><span class=\"line\">    backgroundColor: Colors.transparent,</span><br><span class=\"line\">    elevation: <span class=\"number\">0</span>,</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">        <span class=\"string\">'flutter awesome list'</span>,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: HomeBody(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Banner部分\"><a href=\"#Banner部分\" class=\"headerlink\" title=\"Banner部分\"></a>Banner部分</h3><ul>\n<li>我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度</li>\n<li><p>下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClipper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomClipper</span>&lt;<span class=\"title\">Path</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Path getClip(Size size) &#123;</span><br><span class=\"line\">    Path p = Path();</span><br><span class=\"line\">    p.lineTo(size.width, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    p.lineTo(size.width, size.height / <span class=\"number\">4.75</span>);</span><br><span class=\"line\">    p.lineTo(<span class=\"number\">0.0</span>, size.height / <span class=\"number\">3.75</span>);</span><br><span class=\"line\">    p.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReclip(CustomClipper oldClipper) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListTile(</span><br><span class=\"line\">    leading: CircleAvatar(</span><br><span class=\"line\">    backgroundImage: NetworkImage(CONSTANT.userAvatar),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">    CONSTANT.userName,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    textScaleFactor: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    subtitle: Text(</span><br><span class=\"line\">    CONSTANT.userProfile,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"列表展示部分\"><a href=\"#列表展示部分\" class=\"headerlink\" title=\"列表展示部分\"></a>列表展示部分</h3><ul>\n<li>列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem</li>\n<li>我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面</li>\n<li>图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">    tag: index,</span><br><span class=\"line\">    child: FadeInImage(</span><br><span class=\"line\">        image: NetworkImage(data.image),</span><br><span class=\"line\">        fit: BoxFit.cover,</span><br><span class=\"line\">        placeholder: AssetImage(<span class=\"string\">'assets/images/loading.gif'</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"详情页面\"><a href=\"#详情页面\" class=\"headerlink\" title=\"详情页面\"></a>详情页面</h3><p>最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><ul>\n<li>文章中没有张贴全部代码，感兴趣的同学可以看下源码<a href=\"https://github.com/xch1029/awesomelist\" target=\"_blank\" rel=\"noopener\">xch1029/awesomelist</a></li>\n<li><a href=\"https://juejin.im/post/5d0203ca5188256aa76bc38e\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://www.jianshu.com/p/a7b902b9af88\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://colorsupplyyy.com/app\" target=\"_blank\" rel=\"noopener\">颜色生成工具 来自这里</a></li>\n<li><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener\">图片 来自这里</a></li>\n<li>受启发于 <a href=\"https://github.com/samarthagarwal/FlutterAwesomeList\" target=\"_blank\" rel=\"noopener\">FlutterAwesomeList</a></li>\n</ul>\n"},{"title":"操作URL的黑科技","date":"2019-06-14T10:02:06.000Z","_content":"### 前言\n现在有这么个URL：www.baidu.com/s?wd=蔡徐坤&skill=篮球&year=2019 ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：\n\n![](http://qiniu.tbmao.com/URLSearchParams1.jpg)\n\n杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。\n\n### 简单使用\n只需要new一个URLSearchParams的实例即可，代码：\n\n``` javascript\nlet url = '?wd=蔡徐坤&skill=篮球&year=2019';\nlet searchParams = new URLSearchParams(url);\n\nfor (let p of searchParams) {\n  console.log(p);\n}\n// [\"wd\", \"蔡徐坤\"]\n// [\"skill\", \"篮球\"]\n// [\"year\", \"2019\"]\n```\n### 获取单个字段\n假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：\n\n``` javascript\nsearchParams.get('wd') // \"蔡徐坤\"\nsearchParams.get('skill') // \"篮球\"\nsearchParams.get('year') // \"2019\"\n```\n\n有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：\n\n``` javascript\nsearchParams.has('wd') // true\nsearchParams.has('age') // false\n```\n\n### 添加字段\n实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：\n\n``` javascript\nsearchParams.append('age', 26);\nsearchParams.has('age'); // true\nsearchParams.get('age'); // 26\n```\n\n### 删除字段\n现在不想要year字段了，直接使用delete即可，代码：\n\n``` javascript\nsearchParams.delete('year');\nsearchParams.has('year'); // false\n```\n\n### 设置字段\n有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：\n``` javascript\nsearchParams.set('skill', '篮球 唱 跳 rap');\n```\n\n### 转为字符串\n修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法\n\n``` javascript\nsearchParams.toString(); // \"wd=蔡徐坤&skill=篮球+唱+跳+rap&year=2019&age=26\"\n```\n\n### 一波操作后\n\n![](http://qiniu.tbmao.com/URLSearchParams2.gif)\n\n### 兼容性\n\n现代浏览器基本没有啥大问题，但是IE的支持不是很理想。\n\n![](http://qiniu.tbmao.com/URLSearchParams3.png)\n\n### 外链\n- [MDN参考](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n- [博客地址查看 jser.tech](https://jser.tech/2019/06/14/操作URL的黑科技/)\n- [掘金](https://juejin.im/post/5d038c9051882548ac439933)\n","source":"_posts/操作URL的黑科技.md","raw":"---\ntitle: 操作URL的黑科技\ndate: 2019-06-14 18:02:06\ntags: javascript\n---\n### 前言\n现在有这么个URL：www.baidu.com/s?wd=蔡徐坤&skill=篮球&year=2019 ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：\n\n![](http://qiniu.tbmao.com/URLSearchParams1.jpg)\n\n杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。\n\n### 简单使用\n只需要new一个URLSearchParams的实例即可，代码：\n\n``` javascript\nlet url = '?wd=蔡徐坤&skill=篮球&year=2019';\nlet searchParams = new URLSearchParams(url);\n\nfor (let p of searchParams) {\n  console.log(p);\n}\n// [\"wd\", \"蔡徐坤\"]\n// [\"skill\", \"篮球\"]\n// [\"year\", \"2019\"]\n```\n### 获取单个字段\n假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：\n\n``` javascript\nsearchParams.get('wd') // \"蔡徐坤\"\nsearchParams.get('skill') // \"篮球\"\nsearchParams.get('year') // \"2019\"\n```\n\n有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：\n\n``` javascript\nsearchParams.has('wd') // true\nsearchParams.has('age') // false\n```\n\n### 添加字段\n实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：\n\n``` javascript\nsearchParams.append('age', 26);\nsearchParams.has('age'); // true\nsearchParams.get('age'); // 26\n```\n\n### 删除字段\n现在不想要year字段了，直接使用delete即可，代码：\n\n``` javascript\nsearchParams.delete('year');\nsearchParams.has('year'); // false\n```\n\n### 设置字段\n有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：\n``` javascript\nsearchParams.set('skill', '篮球 唱 跳 rap');\n```\n\n### 转为字符串\n修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法\n\n``` javascript\nsearchParams.toString(); // \"wd=蔡徐坤&skill=篮球+唱+跳+rap&year=2019&age=26\"\n```\n\n### 一波操作后\n\n![](http://qiniu.tbmao.com/URLSearchParams2.gif)\n\n### 兼容性\n\n现代浏览器基本没有啥大问题，但是IE的支持不是很理想。\n\n![](http://qiniu.tbmao.com/URLSearchParams3.png)\n\n### 外链\n- [MDN参考](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n- [博客地址查看 jser.tech](https://jser.tech/2019/06/14/操作URL的黑科技/)\n- [掘金](https://juejin.im/post/5d038c9051882548ac439933)\n","slug":"操作URL的黑科技","published":1,"updated":"2019-07-15T01:41:40.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234ps000btot2rshkm9dv","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>现在有这么个URL：<a href=\"http://www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019\" target=\"_blank\" rel=\"noopener\">www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019</a> ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams1.jpg\" alt></p>\n<p>杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>只需要new一个URLSearchParams的实例即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">'?wd=蔡徐坤&amp;skill=篮球&amp;year=2019'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> searchParams) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"wd\", \"蔡徐坤\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"skill\", \"篮球\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"year\", \"2019\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取单个字段\"><a href=\"#获取单个字段\" class=\"headerlink\" title=\"获取单个字段\"></a>获取单个字段</h3><p>假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.get(<span class=\"string\">'wd'</span>) <span class=\"comment\">// \"蔡徐坤\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'skill'</span>) <span class=\"comment\">// \"篮球\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'year'</span>) <span class=\"comment\">// \"2019\"</span></span><br></pre></td></tr></table></figure>\n<p>有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.has(<span class=\"string\">'wd'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h3><p>实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.append(<span class=\"string\">'age'</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'age'</span>); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h3><p>现在不想要year字段了，直接使用delete即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.delete(<span class=\"string\">'year'</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'year'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置字段\"><a href=\"#设置字段\" class=\"headerlink\" title=\"设置字段\"></a>设置字段</h3><p>有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.set(<span class=\"string\">'skill'</span>, <span class=\"string\">'篮球 唱 跳 rap'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"转为字符串\"><a href=\"#转为字符串\" class=\"headerlink\" title=\"转为字符串\"></a>转为字符串</h3><p>修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.toString(); <span class=\"comment\">// \"wd=蔡徐坤&amp;skill=篮球+唱+跳+rap&amp;year=2019&amp;age=26\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一波操作后\"><a href=\"#一波操作后\" class=\"headerlink\" title=\"一波操作后\"></a>一波操作后</h3><p><img src=\"http://qiniu.tbmao.com/URLSearchParams2.gif\" alt></p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>现代浏览器基本没有啥大问题，但是IE的支持不是很理想。</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams3.png\" alt></p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\" rel=\"noopener\">MDN参考</a></li>\n<li><a href=\"https://jser.tech/2019/06/14/操作URL的黑科技/\" target=\"_blank\" rel=\"noopener\">博客地址查看 jser.tech</a></li>\n<li><a href=\"https://juejin.im/post/5d038c9051882548ac439933\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>现在有这么个URL：<a href=\"http://www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019\" target=\"_blank\" rel=\"noopener\">www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019</a> ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams1.jpg\" alt></p>\n<p>杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>只需要new一个URLSearchParams的实例即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">'?wd=蔡徐坤&amp;skill=篮球&amp;year=2019'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> searchParams) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"wd\", \"蔡徐坤\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"skill\", \"篮球\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"year\", \"2019\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取单个字段\"><a href=\"#获取单个字段\" class=\"headerlink\" title=\"获取单个字段\"></a>获取单个字段</h3><p>假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.get(<span class=\"string\">'wd'</span>) <span class=\"comment\">// \"蔡徐坤\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'skill'</span>) <span class=\"comment\">// \"篮球\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'year'</span>) <span class=\"comment\">// \"2019\"</span></span><br></pre></td></tr></table></figure>\n<p>有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.has(<span class=\"string\">'wd'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h3><p>实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.append(<span class=\"string\">'age'</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'age'</span>); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h3><p>现在不想要year字段了，直接使用delete即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.delete(<span class=\"string\">'year'</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'year'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置字段\"><a href=\"#设置字段\" class=\"headerlink\" title=\"设置字段\"></a>设置字段</h3><p>有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.set(<span class=\"string\">'skill'</span>, <span class=\"string\">'篮球 唱 跳 rap'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"转为字符串\"><a href=\"#转为字符串\" class=\"headerlink\" title=\"转为字符串\"></a>转为字符串</h3><p>修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.toString(); <span class=\"comment\">// \"wd=蔡徐坤&amp;skill=篮球+唱+跳+rap&amp;year=2019&amp;age=26\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一波操作后\"><a href=\"#一波操作后\" class=\"headerlink\" title=\"一波操作后\"></a>一波操作后</h3><p><img src=\"http://qiniu.tbmao.com/URLSearchParams2.gif\" alt></p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>现代浏览器基本没有啥大问题，但是IE的支持不是很理想。</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams3.png\" alt></p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\" rel=\"noopener\">MDN参考</a></li>\n<li><a href=\"https://jser.tech/2019/06/14/操作URL的黑科技/\" target=\"_blank\" rel=\"noopener\">博客地址查看 jser.tech</a></li>\n<li><a href=\"https://juejin.im/post/5d038c9051882548ac439933\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n"},{"title":"Flutter打造一款酷酷的电影App","date":"2019-07-19T15:01:47.000Z","_content":"> 使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。\n\n![App截图](http://qiniu.tbmao.com/flutterfluttermovie.jpg)\n\n### 从main.dart开始\n在Flutter里main.dart是应用开始的地方:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/router.dart' as router;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: '电影',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      onGenerateRoute: router.generateRoute,\n      initialRoute: '/',\n    );\n  }\n}\n```\n一般的，在Flutter中管理路由有两种方式，一种是直接使用`Navigator.of(context).push()`，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在`MaterialApp`的`onGenerateRoute`字段上即可，具体的路由定义放在了单独的文件中进行管理`utils/router.dart`:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/home.dart';\nimport 'package:movie/screens/detail.dart';\nimport 'package:movie/screens/videoPlayer.dart';\n\nRoute<dynamic> generateRoute(RouteSettings settings) {\n  switch (settings.name) {\n    case '/':\n      return MaterialPageRoute(builder: (context) => Home());\n    case 'detail':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => MovieDetail(id: arguments));\n    case 'video':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => VideoPage(url: arguments));\n    default:\n      return MaterialPageRoute(builder: (context) => Home());\n  }\n}\n```\n真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。\n\n### 首页\n在首页中使用TabBar来展示\"正在热映\"和\"TOP250\":\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/hot.dart';\n\nclass Home extends StatefulWidget {\n  Home({Key key}) : super(key: key);\n\n  _HomeState createState() => _HomeState();\n}\n\nclass _HomeState extends State<Home> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 2);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '正在热映'),\n            Tab(text: 'TOP250'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          Hot(),\n          Hot(history: true),\n        ],\n      ),\n    );\n  }\n}\n\n```\n两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面`Hot`,传入`history`参数来代表是否为Top250页面\n\n### 复用的Hot组件\n- 在这个组件中，通过history字段来区分成两个页面。\n- 在页面`initState`的生命周期中，请求数据，再进行相应的展示。\n- 下拉刷新的功能是使用的RefreshIndicator组件，在其`onRefresh`中进行下拉时的逻辑处理。\n- Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过`ListView`的controller来做判断即可：当前滚动的位置是否到达最大滚动位置`_scrollController.position.pixels == _scrollController.position.maxScrollExtent`\n- 为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载`wantKeepAlive`即可，下面是完整的代码:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/api.dart' as api;\nimport 'package:movie/widgets/movieItem.dart';\n\nclass Hot extends StatefulWidget {\n  final bool history;\n  Hot({Key key, this.history = false}) : super(key: key);\n\n  _HotState createState() => _HotState();\n}\n\nclass _HotState extends State<Hot> with AutomaticKeepAliveClientMixin {\n  List _movieList = [];\n  int start = 0;\n  int total = 0;\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n      if (_scrollController.position.pixels ==\n          _scrollController.position.maxScrollExtent) {\n        getMore();\n      }\n    });\n    this.query(init: true);\n  }\n\n  query({bool init = false}) async {\n    Map res = await api.getMovieList(\n        history: widget.history, start: init ? 0 : this.start);\n    var start = res['start'];\n    var total = res['total'];\n    var subjects = res['subjects'];\n    setState(() {\n      if (init) {\n        this._movieList = subjects;\n      } else {\n        this._movieList.addAll(subjects);\n      }\n      this.start = start + 10;\n      this.total = total;\n    });\n  }\n\n  Future<Null> _onRefresh() async {\n    await this.query(init: true);\n  }\n\n  getMore() {\n    if (start < total) {\n      query();\n    }\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return RefreshIndicator(\n      onRefresh: _onRefresh,\n      child: ListView.builder(\n        controller: _scrollController,\n        itemCount: this._movieList.length,\n        itemBuilder: (BuildContext context, int index) =>\n            MovieItem(data: this._movieList[index]),\n      ),\n    );\n  }\n}\n\n```\n\n### 电影的详情页面\n点击单条电影时使用`Navigator.pushNamed(context, 'detail', arguments: data['id']);`即可跳转详情页，在详情页中通过`id`再请求接口获取详情:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/widgets/detail/detailTop.dart';\nimport 'package:movie/widgets/detail/rateing.dart';\nimport 'package:movie/widgets/detail/actors.dart';\nimport 'package:movie/widgets/detail/photos.dart';\nimport 'package:movie/widgets/detail/comments.dart';\nimport 'package:movie/utils/api.dart' as api;\n\nclass MovieDetail extends StatefulWidget {\n  final id;\n  MovieDetail({Key key, this.id}) : super(key: key);\n\n  _MovieDetailState createState() => _MovieDetailState();\n}\n\nclass _MovieDetailState extends State<MovieDetail> {\n  var _data = {};\n\n  @override\n  void initState() {\n    super.initState();\n    this.init();\n  }\n\n  init() async {\n    var res = await api.getMovieDetail(widget.id);\n    setState(() {\n      _data = res;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _data.isEmpty\n          ? Center(child: CircularProgressIndicator(),)\n          : SafeArea(\n              child: Container(\n                height: MediaQuery.of(context).size.height,\n                width: MediaQuery.of(context).size.width,\n                child: ListView(\n                  scrollDirection: Axis.vertical,\n                  children: <Widget>[\n                    MovieDetailTop(data: _data),\n                    Rate(count: _data['ratings_count'], rating: _data['rating']),\n                    Container(padding: EdgeInsets.all(10),child: Text(_data['summary'])),\n                    Actors(directors: _data['directors'], casts: _data['casts']),\n                    Photos(photos: _data['photos'],),\n                    Comments(comments: _data['popular_comments']),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}\n\n```\n在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：\n- `widgets/detail/detailTop.dart` 页面顶部的电影概述\n- `widgets/detail/rateing.dart` 评分组件\n- `widgets/detail/actors.dart` 演员表\n- `widgets/detail/photos.dart` 剧照\n- `widgets/detail/comments.dart` 评论组件\n\n### 真实数据来自哪里？\n应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映`in_theaters`，top250`top250`和电影详情`subject/id`三个接口,请求这些接口是需要`apikey`的，为了大家能方便请求数据，我将`apikey`上传到了github上，还请大家温柔点，不要将这个`apikey`干爆了。\n\n### 相关链接\n[源码仓库](https://github.com/xch1029/movie)\n[博客地址](http://jser.tech/2019/07/19/flutter-movie)\n[掘金地址](https://juejin.im/post/5d31ea42f265da1bbe5e3ea7)\n","source":"_posts/flutter-movie.md","raw":"---\ntitle: Flutter打造一款酷酷的电影App\ndate: 2019-07-19 23:01:47\ntags: flutter\n---\n> 使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。\n\n![App截图](http://qiniu.tbmao.com/flutterfluttermovie.jpg)\n\n### 从main.dart开始\n在Flutter里main.dart是应用开始的地方:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/router.dart' as router;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: '电影',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      onGenerateRoute: router.generateRoute,\n      initialRoute: '/',\n    );\n  }\n}\n```\n一般的，在Flutter中管理路由有两种方式，一种是直接使用`Navigator.of(context).push()`，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在`MaterialApp`的`onGenerateRoute`字段上即可，具体的路由定义放在了单独的文件中进行管理`utils/router.dart`:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/home.dart';\nimport 'package:movie/screens/detail.dart';\nimport 'package:movie/screens/videoPlayer.dart';\n\nRoute<dynamic> generateRoute(RouteSettings settings) {\n  switch (settings.name) {\n    case '/':\n      return MaterialPageRoute(builder: (context) => Home());\n    case 'detail':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => MovieDetail(id: arguments));\n    case 'video':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => VideoPage(url: arguments));\n    default:\n      return MaterialPageRoute(builder: (context) => Home());\n  }\n}\n```\n真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。\n\n### 首页\n在首页中使用TabBar来展示\"正在热映\"和\"TOP250\":\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/hot.dart';\n\nclass Home extends StatefulWidget {\n  Home({Key key}) : super(key: key);\n\n  _HomeState createState() => _HomeState();\n}\n\nclass _HomeState extends State<Home> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 2);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '正在热映'),\n            Tab(text: 'TOP250'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          Hot(),\n          Hot(history: true),\n        ],\n      ),\n    );\n  }\n}\n\n```\n两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面`Hot`,传入`history`参数来代表是否为Top250页面\n\n### 复用的Hot组件\n- 在这个组件中，通过history字段来区分成两个页面。\n- 在页面`initState`的生命周期中，请求数据，再进行相应的展示。\n- 下拉刷新的功能是使用的RefreshIndicator组件，在其`onRefresh`中进行下拉时的逻辑处理。\n- Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过`ListView`的controller来做判断即可：当前滚动的位置是否到达最大滚动位置`_scrollController.position.pixels == _scrollController.position.maxScrollExtent`\n- 为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载`wantKeepAlive`即可，下面是完整的代码:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/api.dart' as api;\nimport 'package:movie/widgets/movieItem.dart';\n\nclass Hot extends StatefulWidget {\n  final bool history;\n  Hot({Key key, this.history = false}) : super(key: key);\n\n  _HotState createState() => _HotState();\n}\n\nclass _HotState extends State<Hot> with AutomaticKeepAliveClientMixin {\n  List _movieList = [];\n  int start = 0;\n  int total = 0;\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n      if (_scrollController.position.pixels ==\n          _scrollController.position.maxScrollExtent) {\n        getMore();\n      }\n    });\n    this.query(init: true);\n  }\n\n  query({bool init = false}) async {\n    Map res = await api.getMovieList(\n        history: widget.history, start: init ? 0 : this.start);\n    var start = res['start'];\n    var total = res['total'];\n    var subjects = res['subjects'];\n    setState(() {\n      if (init) {\n        this._movieList = subjects;\n      } else {\n        this._movieList.addAll(subjects);\n      }\n      this.start = start + 10;\n      this.total = total;\n    });\n  }\n\n  Future<Null> _onRefresh() async {\n    await this.query(init: true);\n  }\n\n  getMore() {\n    if (start < total) {\n      query();\n    }\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return RefreshIndicator(\n      onRefresh: _onRefresh,\n      child: ListView.builder(\n        controller: _scrollController,\n        itemCount: this._movieList.length,\n        itemBuilder: (BuildContext context, int index) =>\n            MovieItem(data: this._movieList[index]),\n      ),\n    );\n  }\n}\n\n```\n\n### 电影的详情页面\n点击单条电影时使用`Navigator.pushNamed(context, 'detail', arguments: data['id']);`即可跳转详情页，在详情页中通过`id`再请求接口获取详情:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/widgets/detail/detailTop.dart';\nimport 'package:movie/widgets/detail/rateing.dart';\nimport 'package:movie/widgets/detail/actors.dart';\nimport 'package:movie/widgets/detail/photos.dart';\nimport 'package:movie/widgets/detail/comments.dart';\nimport 'package:movie/utils/api.dart' as api;\n\nclass MovieDetail extends StatefulWidget {\n  final id;\n  MovieDetail({Key key, this.id}) : super(key: key);\n\n  _MovieDetailState createState() => _MovieDetailState();\n}\n\nclass _MovieDetailState extends State<MovieDetail> {\n  var _data = {};\n\n  @override\n  void initState() {\n    super.initState();\n    this.init();\n  }\n\n  init() async {\n    var res = await api.getMovieDetail(widget.id);\n    setState(() {\n      _data = res;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _data.isEmpty\n          ? Center(child: CircularProgressIndicator(),)\n          : SafeArea(\n              child: Container(\n                height: MediaQuery.of(context).size.height,\n                width: MediaQuery.of(context).size.width,\n                child: ListView(\n                  scrollDirection: Axis.vertical,\n                  children: <Widget>[\n                    MovieDetailTop(data: _data),\n                    Rate(count: _data['ratings_count'], rating: _data['rating']),\n                    Container(padding: EdgeInsets.all(10),child: Text(_data['summary'])),\n                    Actors(directors: _data['directors'], casts: _data['casts']),\n                    Photos(photos: _data['photos'],),\n                    Comments(comments: _data['popular_comments']),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}\n\n```\n在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：\n- `widgets/detail/detailTop.dart` 页面顶部的电影概述\n- `widgets/detail/rateing.dart` 评分组件\n- `widgets/detail/actors.dart` 演员表\n- `widgets/detail/photos.dart` 剧照\n- `widgets/detail/comments.dart` 评论组件\n\n### 真实数据来自哪里？\n应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映`in_theaters`，top250`top250`和电影详情`subject/id`三个接口,请求这些接口是需要`apikey`的，为了大家能方便请求数据，我将`apikey`上传到了github上，还请大家温柔点，不要将这个`apikey`干爆了。\n\n### 相关链接\n[源码仓库](https://github.com/xch1029/movie)\n[博客地址](http://jser.tech/2019/07/19/flutter-movie)\n[掘金地址](https://juejin.im/post/5d31ea42f265da1bbe5e3ea7)\n","slug":"flutter-movie","published":1,"updated":"2019-07-29T07:06:50.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234pw000etot23lp1996k","content":"<blockquote>\n<p>使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。</p>\n</blockquote>\n<p><img src=\"http://qiniu.tbmao.com/flutterfluttermovie.jpg\" alt=\"App截图\"></p>\n<h3 id=\"从main-dart开始\"><a href=\"#从main-dart开始\" class=\"headerlink\" title=\"从main.dart开始\"></a>从main.dart开始</h3><p>在Flutter里main.dart是应用开始的地方:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/router.dart'</span> <span class=\"keyword\">as</span> router;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'电影'</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onGenerateRoute: router.generateRoute,</span><br><span class=\"line\">      initialRoute: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般的，在Flutter中管理路由有两种方式，一种是直接使用<code>Navigator.of(context).push()</code>，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在<code>MaterialApp</code>的<code>onGenerateRoute</code>字段上即可，具体的路由定义放在了单独的文件中进行管理<code>utils/router.dart</code>:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/home.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/detail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/videoPlayer.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Route&lt;<span class=\"keyword\">dynamic</span>&gt; generateRoute(RouteSettings settings) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (settings.name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'detail'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; MovieDetail(id: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; VideoPage(url: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>在首页中使用TabBar来展示”正在热映”和”TOP250”:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/hot.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  Home(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeState createState() =&gt; _HomeState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Home</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'正在热映'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'TOP250'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Hot(),</span><br><span class=\"line\">          Hot(history: <span class=\"keyword\">true</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面<code>Hot</code>,传入<code>history</code>参数来代表是否为Top250页面</p>\n<h3 id=\"复用的Hot组件\"><a href=\"#复用的Hot组件\" class=\"headerlink\" title=\"复用的Hot组件\"></a>复用的Hot组件</h3><ul>\n<li>在这个组件中，通过history字段来区分成两个页面。</li>\n<li>在页面<code>initState</code>的生命周期中，请求数据，再进行相应的展示。</li>\n<li>下拉刷新的功能是使用的RefreshIndicator组件，在其<code>onRefresh</code>中进行下拉时的逻辑处理。</li>\n<li>Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过<code>ListView</code>的controller来做判断即可：当前滚动的位置是否到达最大滚动位置<code>_scrollController.position.pixels == _scrollController.position.maxScrollExtent</code></li>\n<li>为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载<code>wantKeepAlive</code>即可，下面是完整的代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/movieItem.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hot</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">bool</span> history;</span><br><span class=\"line\">  Hot(&#123;Key key, <span class=\"keyword\">this</span>.history = <span class=\"keyword\">false</span>&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HotState createState() =&gt; _HotState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HotState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Hot</span>&gt; <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> _movieList = [];</span><br><span class=\"line\">  <span class=\"built_in\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_scrollController.position.pixels ==</span><br><span class=\"line\">          _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        getMore();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  query(&#123;<span class=\"built_in\">bool</span> init = <span class=\"keyword\">false</span>&#125;) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getMovieList(</span><br><span class=\"line\">        history: widget.history, start: init ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.start);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = res[<span class=\"string\">'start'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = res[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subjects = res[<span class=\"string\">'subjects'</span>];</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList = subjects;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList.addAll(subjects);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start = start + <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total = total;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"built_in\">Null</span>&gt; _onRefresh() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getMore() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; total) &#123;</span><br><span class=\"line\">      query();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">        itemCount: <span class=\"keyword\">this</span>._movieList.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) =&gt;</span><br><span class=\"line\">            MovieItem(data: <span class=\"keyword\">this</span>._movieList[index]),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"电影的详情页面\"><a href=\"#电影的详情页面\" class=\"headerlink\" title=\"电影的详情页面\"></a>电影的详情页面</h3><p>点击单条电影时使用<code>Navigator.pushNamed(context, &#39;detail&#39;, arguments: data[&#39;id&#39;]);</code>即可跳转详情页，在详情页中通过<code>id</code>再请求接口获取详情:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/detailTop.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/rateing.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/actors.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/photos.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/comments.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> id;</span><br><span class=\"line\">  MovieDetail(&#123;Key key, <span class=\"keyword\">this</span>.id&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _MovieDetailState createState() =&gt; _MovieDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MovieDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MovieDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> api.getMovieDetail(widget.id);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _data = res;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: _data.isEmpty</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator(),)</span><br><span class=\"line\">          : SafeArea(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                height: MediaQuery.of(context).size.height,</span><br><span class=\"line\">                width: MediaQuery.of(context).size.width,</span><br><span class=\"line\">                child: ListView(</span><br><span class=\"line\">                  scrollDirection: Axis.vertical,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    MovieDetailTop(data: _data),</span><br><span class=\"line\">                    Rate(count: _data[<span class=\"string\">'ratings_count'</span>], rating: _data[<span class=\"string\">'rating'</span>]),</span><br><span class=\"line\">                    Container(padding: EdgeInsets.all(<span class=\"number\">10</span>),child: Text(_data[<span class=\"string\">'summary'</span>])),</span><br><span class=\"line\">                    Actors(directors: _data[<span class=\"string\">'directors'</span>], casts: _data[<span class=\"string\">'casts'</span>]),</span><br><span class=\"line\">                    Photos(photos: _data[<span class=\"string\">'photos'</span>],),</span><br><span class=\"line\">                    Comments(comments: _data[<span class=\"string\">'popular_comments'</span>]),</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：</p>\n<ul>\n<li><code>widgets/detail/detailTop.dart</code> 页面顶部的电影概述</li>\n<li><code>widgets/detail/rateing.dart</code> 评分组件</li>\n<li><code>widgets/detail/actors.dart</code> 演员表</li>\n<li><code>widgets/detail/photos.dart</code> 剧照</li>\n<li><code>widgets/detail/comments.dart</code> 评论组件</li>\n</ul>\n<h3 id=\"真实数据来自哪里？\"><a href=\"#真实数据来自哪里？\" class=\"headerlink\" title=\"真实数据来自哪里？\"></a>真实数据来自哪里？</h3><p>应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映<code>in_theaters</code>，top250<code>top250</code>和电影详情<code>subject/id</code>三个接口,请求这些接口是需要<code>apikey</code>的，为了大家能方便请求数据，我将<code>apikey</code>上传到了github上，还请大家温柔点，不要将这个<code>apikey</code>干爆了。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p><a href=\"https://github.com/xch1029/movie\" target=\"_blank\" rel=\"noopener\">源码仓库</a><br><a href=\"http://jser.tech/2019/07/19/flutter-movie\" target=\"_blank\" rel=\"noopener\">博客地址</a><br><a href=\"https://juejin.im/post/5d31ea42f265da1bbe5e3ea7\" target=\"_blank\" rel=\"noopener\">掘金地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。</p>\n</blockquote>\n<p><img src=\"http://qiniu.tbmao.com/flutterfluttermovie.jpg\" alt=\"App截图\"></p>\n<h3 id=\"从main-dart开始\"><a href=\"#从main-dart开始\" class=\"headerlink\" title=\"从main.dart开始\"></a>从main.dart开始</h3><p>在Flutter里main.dart是应用开始的地方:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/router.dart'</span> <span class=\"keyword\">as</span> router;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'电影'</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onGenerateRoute: router.generateRoute,</span><br><span class=\"line\">      initialRoute: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般的，在Flutter中管理路由有两种方式，一种是直接使用<code>Navigator.of(context).push()</code>，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在<code>MaterialApp</code>的<code>onGenerateRoute</code>字段上即可，具体的路由定义放在了单独的文件中进行管理<code>utils/router.dart</code>:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/home.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/detail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/videoPlayer.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Route&lt;<span class=\"keyword\">dynamic</span>&gt; generateRoute(RouteSettings settings) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (settings.name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'detail'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; MovieDetail(id: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; VideoPage(url: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>在首页中使用TabBar来展示”正在热映”和”TOP250”:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/hot.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  Home(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeState createState() =&gt; _HomeState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Home</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'正在热映'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'TOP250'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Hot(),</span><br><span class=\"line\">          Hot(history: <span class=\"keyword\">true</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面<code>Hot</code>,传入<code>history</code>参数来代表是否为Top250页面</p>\n<h3 id=\"复用的Hot组件\"><a href=\"#复用的Hot组件\" class=\"headerlink\" title=\"复用的Hot组件\"></a>复用的Hot组件</h3><ul>\n<li>在这个组件中，通过history字段来区分成两个页面。</li>\n<li>在页面<code>initState</code>的生命周期中，请求数据，再进行相应的展示。</li>\n<li>下拉刷新的功能是使用的RefreshIndicator组件，在其<code>onRefresh</code>中进行下拉时的逻辑处理。</li>\n<li>Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过<code>ListView</code>的controller来做判断即可：当前滚动的位置是否到达最大滚动位置<code>_scrollController.position.pixels == _scrollController.position.maxScrollExtent</code></li>\n<li>为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载<code>wantKeepAlive</code>即可，下面是完整的代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/movieItem.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hot</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">bool</span> history;</span><br><span class=\"line\">  Hot(&#123;Key key, <span class=\"keyword\">this</span>.history = <span class=\"keyword\">false</span>&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HotState createState() =&gt; _HotState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HotState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Hot</span>&gt; <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> _movieList = [];</span><br><span class=\"line\">  <span class=\"built_in\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_scrollController.position.pixels ==</span><br><span class=\"line\">          _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        getMore();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  query(&#123;<span class=\"built_in\">bool</span> init = <span class=\"keyword\">false</span>&#125;) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getMovieList(</span><br><span class=\"line\">        history: widget.history, start: init ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.start);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = res[<span class=\"string\">'start'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = res[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subjects = res[<span class=\"string\">'subjects'</span>];</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList = subjects;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList.addAll(subjects);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start = start + <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total = total;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"built_in\">Null</span>&gt; _onRefresh() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getMore() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; total) &#123;</span><br><span class=\"line\">      query();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">        itemCount: <span class=\"keyword\">this</span>._movieList.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) =&gt;</span><br><span class=\"line\">            MovieItem(data: <span class=\"keyword\">this</span>._movieList[index]),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"电影的详情页面\"><a href=\"#电影的详情页面\" class=\"headerlink\" title=\"电影的详情页面\"></a>电影的详情页面</h3><p>点击单条电影时使用<code>Navigator.pushNamed(context, &#39;detail&#39;, arguments: data[&#39;id&#39;]);</code>即可跳转详情页，在详情页中通过<code>id</code>再请求接口获取详情:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/detailTop.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/rateing.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/actors.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/photos.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/comments.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> id;</span><br><span class=\"line\">  MovieDetail(&#123;Key key, <span class=\"keyword\">this</span>.id&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _MovieDetailState createState() =&gt; _MovieDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MovieDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MovieDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> api.getMovieDetail(widget.id);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _data = res;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: _data.isEmpty</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator(),)</span><br><span class=\"line\">          : SafeArea(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                height: MediaQuery.of(context).size.height,</span><br><span class=\"line\">                width: MediaQuery.of(context).size.width,</span><br><span class=\"line\">                child: ListView(</span><br><span class=\"line\">                  scrollDirection: Axis.vertical,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    MovieDetailTop(data: _data),</span><br><span class=\"line\">                    Rate(count: _data[<span class=\"string\">'ratings_count'</span>], rating: _data[<span class=\"string\">'rating'</span>]),</span><br><span class=\"line\">                    Container(padding: EdgeInsets.all(<span class=\"number\">10</span>),child: Text(_data[<span class=\"string\">'summary'</span>])),</span><br><span class=\"line\">                    Actors(directors: _data[<span class=\"string\">'directors'</span>], casts: _data[<span class=\"string\">'casts'</span>]),</span><br><span class=\"line\">                    Photos(photos: _data[<span class=\"string\">'photos'</span>],),</span><br><span class=\"line\">                    Comments(comments: _data[<span class=\"string\">'popular_comments'</span>]),</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：</p>\n<ul>\n<li><code>widgets/detail/detailTop.dart</code> 页面顶部的电影概述</li>\n<li><code>widgets/detail/rateing.dart</code> 评分组件</li>\n<li><code>widgets/detail/actors.dart</code> 演员表</li>\n<li><code>widgets/detail/photos.dart</code> 剧照</li>\n<li><code>widgets/detail/comments.dart</code> 评论组件</li>\n</ul>\n<h3 id=\"真实数据来自哪里？\"><a href=\"#真实数据来自哪里？\" class=\"headerlink\" title=\"真实数据来自哪里？\"></a>真实数据来自哪里？</h3><p>应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映<code>in_theaters</code>，top250<code>top250</code>和电影详情<code>subject/id</code>三个接口,请求这些接口是需要<code>apikey</code>的，为了大家能方便请求数据，我将<code>apikey</code>上传到了github上，还请大家温柔点，不要将这个<code>apikey</code>干爆了。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p><a href=\"https://github.com/xch1029/movie\" target=\"_blank\" rel=\"noopener\">源码仓库</a><br><a href=\"http://jser.tech/2019/07/19/flutter-movie\" target=\"_blank\" rel=\"noopener\">博客地址</a><br><a href=\"https://juejin.im/post/5d31ea42f265da1bbe5e3ea7\" target=\"_blank\" rel=\"noopener\">掘金地址</a></p>\n"},{"title":"Flutter之英雄联盟","date":"2019-07-28T08:31:06.000Z","_content":"\n![](http://qiniu.tbmao.com/lollolapp.jpg)\n\n要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用`Flutter`来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。\n\n### 目录结构\n```\n- lib\n    - models\n    - utils\n    - views\n    - widgets\n    - main.dart\n```\n我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:\n- `models`来定义数据模型\n- `utils`里放一些公用的函数、接口、路由、常量等\n- `views`里放的是页面级别的组件\n- `widgets`里放的是页面中需要使用的小组件\n- `main.dart` 是APP的启动文件 \n\n### 开始之处\nAPP必定从`main.dart`开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在`main()`函数中：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() {\n  runApp(MyApp());\n  if (Platform.isAndroid) {\n    SystemUiOverlayStyle systemUiOverlayStyle =\n        SystemUiOverlayStyle(statusBarColor: Colors.transparent);\n    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);\n  }\n}\n```\n\n### 首页\nAPP进入首页后开始拉取后端接口的数据，进而展示英雄列表。`TabBar`组件来定义页面上部的Tab切换，`TabBarView`来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/views/homeList.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/utils/constant.dart';\nimport 'package:lol/utils/utils.dart';\n\nclass HomeView extends StatefulWidget {\n  HomeView({Key key}) : super(key: key);\n\n  _HomeViewState createState() => _HomeViewState();\n}\n\nclass _HomeViewState extends State<HomeView> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n  List<dynamic> heroList = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 6);\n    init();\n  }\n\n  init() async {\n    Map res = await api.getHeroList();\n    setState(() {\n     heroList = res.values.toList();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '战士'),\n            Tab(text: '坦克'),\n            Tab(text: '法师'),\n            Tab(text: '刺客'),\n            Tab(text: '辅助'),\n            Tab(text: '射手'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),\n        ],\n      ),\n    );\n  }\n}\n```\n\n### 首页列表\n首页的六个列表都是一样的，只是数据不同，所以公用一个组件`homeList.dart`即可，切换`Tab`的时候为了不销毁之前的页面需要让组件继承`AutomaticKeepAliveClientMixin`类：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/widgets/home/heroItem.dart';\nimport 'package:lol/models/heroSimple.dart';\n\nclass HomeList extends StatefulWidget {\n  final List data;\n  HomeList({Key key, this.data}) : super(key: key);\n\n  _HomeListState createState() => _HomeListState();\n}\n\nclass _HomeListState extends State<HomeList>\n    with AutomaticKeepAliveClientMixin {\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return Container(\n      padding: EdgeInsets.symmetric(vertical: 5),\n      child: ListView.builder(\n        itemCount: widget.data.length,\n        itemBuilder: (BuildContext context, int index) {\n          return HeroItem(data: HeroSimple.fromJson(widget.data[index]));\n        },\n      ),\n    );\n  }\n}\n```\n### 英雄详情\n点击英雄条目，路由跳转到详情页面`heroDetail.dart`，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库`extended_image`,这个库很强大，而且还是位中国开发者，必须支持。\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/models/heroSimple.dart';\nimport 'package:lol/models/heroDetail.dart';\nimport 'package:lol/utils/utils.dart';\nimport 'package:lol/widgets/detail/detailItem.dart';\nimport 'package:lol/widgets/detail/skin.dart';\nimport 'package:lol/widgets/detail/info.dart';\n\nclass HeroDetail extends StatefulWidget {\n  final HeroSimple heroSimple;\n  HeroDetail({Key key, this.heroSimple}) : super(key: key);\n\n  _HeroDetailState createState() => _HeroDetailState();\n}\n\nclass _HeroDetailState extends State<HeroDetail> {\n  HeroDetailModel _heroData; // hero数据\n  bool _loading = false; // 加载状态\n  String _version = ''; // 国服版本\n  String _updated = ''; // 文档更新时间\n\n  @override\n  void initState() {\n    super.initState();\n    init();\n  }\n\n  init() async {\n    setState(() {\n      _loading = true;\n    });\n    Map res = await api.getHeroDetail(widget.heroSimple.id);\n    var data = res['data'];\n    String version = res['version'];\n    String updated = res['updated'];\n    print(version);\n    setState(() {\n      _heroData = HeroDetailModel.fromJson(data);\n      _version = version;\n      _updated = updated;\n      _loading = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: 0),\n      body: _loading\n          ? Center(child: CircularProgressIndicator())\n          : SingleChildScrollView(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: <Widget>[\n                  DetailItem(\n                    title: '皮肤',\n                    child: Skins(imgList: _heroData.skins),\n                  ),\n                  DetailItem(\n                    title: '类型',\n                    child: Row(\n                        children: _heroData.tags\n                            .map((tag) => Container(\n                                  margin: EdgeInsets.only(right: 10),\n                                  child: CircleAvatar(\n                                    child: Text(\n                                      Utils.heroTagsMap(tag),\n                                      style: TextStyle(color: Colors.white),\n                                    ),\n                                  ),\n                                ))\n                            .toList()),\n                  ),\n                  DetailItem(\n                    title: '属性',\n                    child: HeroInfo(data: _heroData.info),\n                  ),\n                  DetailItem(\n                    title: '使用技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.allytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '对抗技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.enemytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '背景故事',\n                    child: Text(_heroData.lore),\n                  ),\n                  DetailItem(\n                    title: '国服版本',\n                    child: Text(_version),\n                  ),\n                  DetailItem(\n                    title: '更新时间',\n                    child: Text(_updated),\n                  )\n                ],\n              ),\n            ),\n    );\n  }\n}\n```\n\n### 更多链接\n- [源码](https://github.com/xch1029/LOL)\n- [博客](http://jser.tech/2019/07/28/lol)\n- [掘金](https://juejin.im/post/5d3d733c6fb9a07ecf726d3a)\n","source":"_posts/lol.md","raw":"---\ntitle: Flutter之英雄联盟\ndate: 2019-07-28 16:31:06\ntags: flutter\n---\n\n![](http://qiniu.tbmao.com/lollolapp.jpg)\n\n要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用`Flutter`来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。\n\n### 目录结构\n```\n- lib\n    - models\n    - utils\n    - views\n    - widgets\n    - main.dart\n```\n我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:\n- `models`来定义数据模型\n- `utils`里放一些公用的函数、接口、路由、常量等\n- `views`里放的是页面级别的组件\n- `widgets`里放的是页面中需要使用的小组件\n- `main.dart` 是APP的启动文件 \n\n### 开始之处\nAPP必定从`main.dart`开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在`main()`函数中：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() {\n  runApp(MyApp());\n  if (Platform.isAndroid) {\n    SystemUiOverlayStyle systemUiOverlayStyle =\n        SystemUiOverlayStyle(statusBarColor: Colors.transparent);\n    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);\n  }\n}\n```\n\n### 首页\nAPP进入首页后开始拉取后端接口的数据，进而展示英雄列表。`TabBar`组件来定义页面上部的Tab切换，`TabBarView`来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/views/homeList.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/utils/constant.dart';\nimport 'package:lol/utils/utils.dart';\n\nclass HomeView extends StatefulWidget {\n  HomeView({Key key}) : super(key: key);\n\n  _HomeViewState createState() => _HomeViewState();\n}\n\nclass _HomeViewState extends State<HomeView> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n  List<dynamic> heroList = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 6);\n    init();\n  }\n\n  init() async {\n    Map res = await api.getHeroList();\n    setState(() {\n     heroList = res.values.toList();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '战士'),\n            Tab(text: '坦克'),\n            Tab(text: '法师'),\n            Tab(text: '刺客'),\n            Tab(text: '辅助'),\n            Tab(text: '射手'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),\n        ],\n      ),\n    );\n  }\n}\n```\n\n### 首页列表\n首页的六个列表都是一样的，只是数据不同，所以公用一个组件`homeList.dart`即可，切换`Tab`的时候为了不销毁之前的页面需要让组件继承`AutomaticKeepAliveClientMixin`类：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/widgets/home/heroItem.dart';\nimport 'package:lol/models/heroSimple.dart';\n\nclass HomeList extends StatefulWidget {\n  final List data;\n  HomeList({Key key, this.data}) : super(key: key);\n\n  _HomeListState createState() => _HomeListState();\n}\n\nclass _HomeListState extends State<HomeList>\n    with AutomaticKeepAliveClientMixin {\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return Container(\n      padding: EdgeInsets.symmetric(vertical: 5),\n      child: ListView.builder(\n        itemCount: widget.data.length,\n        itemBuilder: (BuildContext context, int index) {\n          return HeroItem(data: HeroSimple.fromJson(widget.data[index]));\n        },\n      ),\n    );\n  }\n}\n```\n### 英雄详情\n点击英雄条目，路由跳转到详情页面`heroDetail.dart`，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库`extended_image`,这个库很强大，而且还是位中国开发者，必须支持。\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/models/heroSimple.dart';\nimport 'package:lol/models/heroDetail.dart';\nimport 'package:lol/utils/utils.dart';\nimport 'package:lol/widgets/detail/detailItem.dart';\nimport 'package:lol/widgets/detail/skin.dart';\nimport 'package:lol/widgets/detail/info.dart';\n\nclass HeroDetail extends StatefulWidget {\n  final HeroSimple heroSimple;\n  HeroDetail({Key key, this.heroSimple}) : super(key: key);\n\n  _HeroDetailState createState() => _HeroDetailState();\n}\n\nclass _HeroDetailState extends State<HeroDetail> {\n  HeroDetailModel _heroData; // hero数据\n  bool _loading = false; // 加载状态\n  String _version = ''; // 国服版本\n  String _updated = ''; // 文档更新时间\n\n  @override\n  void initState() {\n    super.initState();\n    init();\n  }\n\n  init() async {\n    setState(() {\n      _loading = true;\n    });\n    Map res = await api.getHeroDetail(widget.heroSimple.id);\n    var data = res['data'];\n    String version = res['version'];\n    String updated = res['updated'];\n    print(version);\n    setState(() {\n      _heroData = HeroDetailModel.fromJson(data);\n      _version = version;\n      _updated = updated;\n      _loading = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: 0),\n      body: _loading\n          ? Center(child: CircularProgressIndicator())\n          : SingleChildScrollView(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: <Widget>[\n                  DetailItem(\n                    title: '皮肤',\n                    child: Skins(imgList: _heroData.skins),\n                  ),\n                  DetailItem(\n                    title: '类型',\n                    child: Row(\n                        children: _heroData.tags\n                            .map((tag) => Container(\n                                  margin: EdgeInsets.only(right: 10),\n                                  child: CircleAvatar(\n                                    child: Text(\n                                      Utils.heroTagsMap(tag),\n                                      style: TextStyle(color: Colors.white),\n                                    ),\n                                  ),\n                                ))\n                            .toList()),\n                  ),\n                  DetailItem(\n                    title: '属性',\n                    child: HeroInfo(data: _heroData.info),\n                  ),\n                  DetailItem(\n                    title: '使用技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.allytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '对抗技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.enemytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '背景故事',\n                    child: Text(_heroData.lore),\n                  ),\n                  DetailItem(\n                    title: '国服版本',\n                    child: Text(_version),\n                  ),\n                  DetailItem(\n                    title: '更新时间',\n                    child: Text(_updated),\n                  )\n                ],\n              ),\n            ),\n    );\n  }\n}\n```\n\n### 更多链接\n- [源码](https://github.com/xch1029/LOL)\n- [博客](http://jser.tech/2019/07/28/lol)\n- [掘金](https://juejin.im/post/5d3d733c6fb9a07ecf726d3a)\n","slug":"lol","published":1,"updated":"2019-07-29T07:06:50.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234qt000ytot216j4ff2g","content":"<p><img src=\"http://qiniu.tbmao.com/lollolapp.jpg\" alt></p>\n<p>要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用<code>Flutter</code>来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- lib</span><br><span class=\"line\">    - models</span><br><span class=\"line\">    - utils</span><br><span class=\"line\">    - views</span><br><span class=\"line\">    - widgets</span><br><span class=\"line\">    - main.dart</span><br></pre></td></tr></table></figure>\n<p>我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:</p>\n<ul>\n<li><code>models</code>来定义数据模型</li>\n<li><code>utils</code>里放一些公用的函数、接口、路由、常量等</li>\n<li><code>views</code>里放的是页面级别的组件</li>\n<li><code>widgets</code>里放的是页面中需要使用的小组件</li>\n<li><code>main.dart</code> 是APP的启动文件 </li>\n</ul>\n<h3 id=\"开始之处\"><a href=\"#开始之处\" class=\"headerlink\" title=\"开始之处\"></a>开始之处</h3><p>APP必定从<code>main.dart</code>开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在<code>main()</code>函数中：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/services.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Platform.isAndroid) &#123;</span><br><span class=\"line\">    SystemUiOverlayStyle systemUiOverlayStyle =</span><br><span class=\"line\">        SystemUiOverlayStyle(statusBarColor: Colors.transparent);</span><br><span class=\"line\">    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>APP进入首页后开始拉取后端接口的数据，进而展示英雄列表。<code>TabBar</code>组件来定义页面上部的Tab切换，<code>TabBarView</code>来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/views/homeList.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/constant.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeView</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  HomeView(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeViewState createState() =&gt; _HomeViewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeViewState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeView</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;<span class=\"keyword\">dynamic</span>&gt; heroList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">6</span>);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroList();</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">     heroList = res.values.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'战士'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'坦克'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'法师'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'刺客'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'辅助'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'射手'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页列表\"><a href=\"#首页列表\" class=\"headerlink\" title=\"首页列表\"></a>首页列表</h3><p>首页的六个列表都是一样的，只是数据不同，所以公用一个组件<code>homeList.dart</code>即可，切换<code>Tab</code>的时候为了不销毁之前的页面需要让组件继承<code>AutomaticKeepAliveClientMixin</code>类：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/home/heroItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeList</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span> data;</span><br><span class=\"line\">  HomeList(&#123;Key key, <span class=\"keyword\">this</span>.data&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeListState createState() =&gt; _HomeListState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeListState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeList</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemCount: widget.data.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> HeroItem(data: HeroSimple.fromJson(widget.data[index]));</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"英雄详情\"><a href=\"#英雄详情\" class=\"headerlink\" title=\"英雄详情\"></a>英雄详情</h3><p>点击英雄条目，路由跳转到详情页面<code>heroDetail.dart</code>，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库<code>extended_image</code>,这个库很强大，而且还是位中国开发者，必须支持。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroDetail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/detailItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/skin.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/info.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> HeroSimple heroSimple;</span><br><span class=\"line\">  HeroDetail(&#123;Key key, <span class=\"keyword\">this</span>.heroSimple&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HeroDetailState createState() =&gt; _HeroDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HeroDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HeroDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  HeroDetailModel _heroData; <span class=\"comment\">// hero数据</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> _loading = <span class=\"keyword\">false</span>; <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _version = <span class=\"string\">''</span>; <span class=\"comment\">// 国服版本</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _updated = <span class=\"string\">''</span>; <span class=\"comment\">// 文档更新时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroDetail(widget.heroSimple.id);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = res[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> version = res[<span class=\"string\">'version'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> updated = res[<span class=\"string\">'updated'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(version);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _heroData = HeroDetailModel.fromJson(data);</span><br><span class=\"line\">      _version = version;</span><br><span class=\"line\">      _updated = updated;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: <span class=\"number\">0</span>),</span><br><span class=\"line\">      body: _loading</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator())</span><br><span class=\"line\">          : SingleChildScrollView(</span><br><span class=\"line\">              child: Column(</span><br><span class=\"line\">                crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'皮肤'</span>,</span><br><span class=\"line\">                    child: Skins(imgList: _heroData.skins),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'类型'</span>,</span><br><span class=\"line\">                    child: Row(</span><br><span class=\"line\">                        children: _heroData.tags</span><br><span class=\"line\">                            .map((tag) =&gt; Container(</span><br><span class=\"line\">                                  margin: EdgeInsets.only(right: <span class=\"number\">10</span>),</span><br><span class=\"line\">                                  child: CircleAvatar(</span><br><span class=\"line\">                                    child: Text(</span><br><span class=\"line\">                                      Utils.heroTagsMap(tag),</span><br><span class=\"line\">                                      style: TextStyle(color: Colors.white),</span><br><span class=\"line\">                                    ),</span><br><span class=\"line\">                                  ),</span><br><span class=\"line\">                                ))</span><br><span class=\"line\">                            .toList()),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'属性'</span>,</span><br><span class=\"line\">                    child: HeroInfo(data: _heroData.info),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'使用技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.allytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'对抗技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.enemytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'背景故事'</span>,</span><br><span class=\"line\">                    child: Text(_heroData.lore),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'国服版本'</span>,</span><br><span class=\"line\">                    child: Text(_version),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">                    child: Text(_updated),</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更多链接\"><a href=\"#更多链接\" class=\"headerlink\" title=\"更多链接\"></a>更多链接</h3><ul>\n<li><a href=\"https://github.com/xch1029/LOL\" target=\"_blank\" rel=\"noopener\">源码</a></li>\n<li><a href=\"http://jser.tech/2019/07/28/lol\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3d733c6fb9a07ecf726d3a\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://qiniu.tbmao.com/lollolapp.jpg\" alt></p>\n<p>要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用<code>Flutter</code>来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- lib</span><br><span class=\"line\">    - models</span><br><span class=\"line\">    - utils</span><br><span class=\"line\">    - views</span><br><span class=\"line\">    - widgets</span><br><span class=\"line\">    - main.dart</span><br></pre></td></tr></table></figure>\n<p>我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:</p>\n<ul>\n<li><code>models</code>来定义数据模型</li>\n<li><code>utils</code>里放一些公用的函数、接口、路由、常量等</li>\n<li><code>views</code>里放的是页面级别的组件</li>\n<li><code>widgets</code>里放的是页面中需要使用的小组件</li>\n<li><code>main.dart</code> 是APP的启动文件 </li>\n</ul>\n<h3 id=\"开始之处\"><a href=\"#开始之处\" class=\"headerlink\" title=\"开始之处\"></a>开始之处</h3><p>APP必定从<code>main.dart</code>开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在<code>main()</code>函数中：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/services.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Platform.isAndroid) &#123;</span><br><span class=\"line\">    SystemUiOverlayStyle systemUiOverlayStyle =</span><br><span class=\"line\">        SystemUiOverlayStyle(statusBarColor: Colors.transparent);</span><br><span class=\"line\">    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>APP进入首页后开始拉取后端接口的数据，进而展示英雄列表。<code>TabBar</code>组件来定义页面上部的Tab切换，<code>TabBarView</code>来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/views/homeList.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/constant.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeView</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  HomeView(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeViewState createState() =&gt; _HomeViewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeViewState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeView</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;<span class=\"keyword\">dynamic</span>&gt; heroList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">6</span>);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroList();</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">     heroList = res.values.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'战士'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'坦克'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'法师'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'刺客'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'辅助'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'射手'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页列表\"><a href=\"#首页列表\" class=\"headerlink\" title=\"首页列表\"></a>首页列表</h3><p>首页的六个列表都是一样的，只是数据不同，所以公用一个组件<code>homeList.dart</code>即可，切换<code>Tab</code>的时候为了不销毁之前的页面需要让组件继承<code>AutomaticKeepAliveClientMixin</code>类：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/home/heroItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeList</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span> data;</span><br><span class=\"line\">  HomeList(&#123;Key key, <span class=\"keyword\">this</span>.data&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeListState createState() =&gt; _HomeListState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeListState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeList</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemCount: widget.data.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> HeroItem(data: HeroSimple.fromJson(widget.data[index]));</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"英雄详情\"><a href=\"#英雄详情\" class=\"headerlink\" title=\"英雄详情\"></a>英雄详情</h3><p>点击英雄条目，路由跳转到详情页面<code>heroDetail.dart</code>，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库<code>extended_image</code>,这个库很强大，而且还是位中国开发者，必须支持。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroDetail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/detailItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/skin.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/info.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> HeroSimple heroSimple;</span><br><span class=\"line\">  HeroDetail(&#123;Key key, <span class=\"keyword\">this</span>.heroSimple&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HeroDetailState createState() =&gt; _HeroDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HeroDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HeroDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  HeroDetailModel _heroData; <span class=\"comment\">// hero数据</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> _loading = <span class=\"keyword\">false</span>; <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _version = <span class=\"string\">''</span>; <span class=\"comment\">// 国服版本</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _updated = <span class=\"string\">''</span>; <span class=\"comment\">// 文档更新时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroDetail(widget.heroSimple.id);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = res[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> version = res[<span class=\"string\">'version'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> updated = res[<span class=\"string\">'updated'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(version);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _heroData = HeroDetailModel.fromJson(data);</span><br><span class=\"line\">      _version = version;</span><br><span class=\"line\">      _updated = updated;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: <span class=\"number\">0</span>),</span><br><span class=\"line\">      body: _loading</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator())</span><br><span class=\"line\">          : SingleChildScrollView(</span><br><span class=\"line\">              child: Column(</span><br><span class=\"line\">                crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'皮肤'</span>,</span><br><span class=\"line\">                    child: Skins(imgList: _heroData.skins),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'类型'</span>,</span><br><span class=\"line\">                    child: Row(</span><br><span class=\"line\">                        children: _heroData.tags</span><br><span class=\"line\">                            .map((tag) =&gt; Container(</span><br><span class=\"line\">                                  margin: EdgeInsets.only(right: <span class=\"number\">10</span>),</span><br><span class=\"line\">                                  child: CircleAvatar(</span><br><span class=\"line\">                                    child: Text(</span><br><span class=\"line\">                                      Utils.heroTagsMap(tag),</span><br><span class=\"line\">                                      style: TextStyle(color: Colors.white),</span><br><span class=\"line\">                                    ),</span><br><span class=\"line\">                                  ),</span><br><span class=\"line\">                                ))</span><br><span class=\"line\">                            .toList()),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'属性'</span>,</span><br><span class=\"line\">                    child: HeroInfo(data: _heroData.info),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'使用技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.allytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'对抗技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.enemytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'背景故事'</span>,</span><br><span class=\"line\">                    child: Text(_heroData.lore),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'国服版本'</span>,</span><br><span class=\"line\">                    child: Text(_version),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">                    child: Text(_updated),</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更多链接\"><a href=\"#更多链接\" class=\"headerlink\" title=\"更多链接\"></a>更多链接</h3><ul>\n<li><a href=\"https://github.com/xch1029/LOL\" target=\"_blank\" rel=\"noopener\">源码</a></li>\n<li><a href=\"http://jser.tech/2019/07/28/lol\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3d733c6fb9a07ecf726d3a\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n"},{"title":"Flutter滚动动画","date":"2019-07-11T03:55:41.000Z","_content":"\n> 现在的Flutter正是如火中天，昨天Google官方正式发布了`Flutter1.7`版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。\n\n本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:\n<img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\" />\n\n### 思路\n列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动\n\n### 入口文件\nFlutter的项目都是从`lib/main.dart`开始：\n\n``` dart\nimport 'package:flutter/material.dart';\nimport 'demo-card.dart';\nimport 'items.dart';\nimport 'animated-bg.dart';\n\nvoid main() => runApp(AnimationDemo());\n\nclass AnimationDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Demo',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: MyHomePage(title: '列表滚动'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  ScrollController _controller = new ScrollController();\n\n  List<DemoCard> get _cards =>\n      items.map((Item _item) => DemoCard(_item)).toList();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(title: Text(widget.title)),\n      body: Stack(\n        alignment: AlignmentDirectional.topStart,\n        children: <Widget>[\n          AnimatedBackground(controller: _controller),\n          Center(\n            child: ListView(controller: _controller, children: _cards),\n          )\n        ],\n      ),\n    );\n  }\n}\n\n```\n在`main.dart`文件中，有几个import进来的文件：\n- `demo-card.dart` 卡片widget，列表就是循环的这个widget\n- `items.dart` 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求\n- `animated-bg.dart` 背景齿轮的widget\n\n\n这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，\n另外，列表渲染的时候需要注意下，我们会使用`ScrollController _controller = new ScrollController();`从而获取垂直方向滚动的距离\n\n### 卡片的mock数据\n为了省事，我们直接将数据放在`lib/items.dart`里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nclass Item {\n  String name;\n  MaterialColor color;\n  IconData icon;\n  Item(this.name, this.color, this.icon);\n}\n\nList<Item> items = [\n  Item('壹', Colors.amber, Icons.adjust),\n  Item('贰', Colors.cyan, Icons.airport_shuttle),\n  Item('叁', Colors.indigo, Icons.android),\n  Item('肆', Colors.green, Icons.beach_access),\n  Item('伍', Colors.pink, Icons.attach_file),\n  Item('陸', Colors.blue, Icons.bug_report)\n];\n\n```\n三个字段：\n- name 卡片左边的名字\n- color 卡片的背景颜色\n- icon 卡片右边的图标\n\n### 卡片Widget\n我们在`main.dart`里这么生成列表的children：`items.map((Item _item) => DemoCard(_item)).toList();`对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'items.dart';\n\nclass DemoCard extends StatelessWidget {\n  DemoCard(this.item);\n  final Item item;\n\n  static final Shadow _shadow =\n      Shadow(offset: Offset(2.0, 2.0), color: Colors.black26);\n  final TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(\n        side: BorderSide(width: 1, color: Colors.black26),\n        borderRadius: BorderRadius.circular(32),\n      ),\n      color: item.color.withOpacity(.7),\n      child: Container(\n        constraints: BoxConstraints.expand(height: 256),\n        child: RawMaterialButton(\n          onPressed: () {},\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: <Widget>[\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\n                children: <Widget>[\n                  Text(item.name, style: _style.copyWith(fontSize: 64)),\n                  Icon(item.icon, color: Colors.white70, size: 72),\n                ],\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：\n```\nDemoCard(this.item);\nfinal Item item;\n```\n使用Card组件可以快速的还原一张卡片样式\n- `elevation`参数控制卡片悬浮高度\n- `shape`参数控制卡片圆角\n- `color`参数控制卡片背景，`item.color.withOpacity(.7)`让背景透明化30%\n\n然后就是使用Column和Row来控制布局的展示\n\n### 背景齿轮的转动\n先看下背景组件的源码，再一一解释：\n``` dart\nimport 'package:flutter/material.dart';\n\nclass AnimatedBackground extends StatefulWidget {\n  AnimatedBackground({Key key, this.controller}) : super(key: key);\n\n  final ScrollController controller;\n\n  @override\n  _AnimatedBackgroundState createState() => _AnimatedBackgroundState();\n}\n\nclass _AnimatedBackgroundState extends State<AnimatedBackground> {\n  get offset => widget.controller.hasClients ? widget.controller.offset : 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: widget.controller,\n      builder: (BuildContext context, Widget child) {\n        return OverflowBox(\n          maxWidth: double.infinity,\n          alignment: Alignment(4, 3),\n          child: Transform.rotate(\n            angle: offset / -512,\n            child: Icon(Icons.settings, size: 512, color: Colors.white),\n          ),\n        );\n      },\n    );\n  }\n}\n\n```\n这个`controller`是在main.dart里传下来的，它是ListView的controller，我们用`widget.controller.offset`即可拿到垂直方向上的滚动距离。\n列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用`AnimatedBuilder`组件，组件有两个重要参数:\n- animation 将widget.controller传给animation\n- builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果\n\nOverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用`Alignment(4, 3)`将齿轮定位到屏幕左下方。\n让齿轮真正动起来的是`Transform.rotate`组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:`angle: offset / -512`\n- 为什么是512呢，因为我们的齿轮的`size: 512`\n- 为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动\n\n### 用到的Widget\n篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦\n- MaterialApp\n- Scaffold\n- AppBar\n- Stack\n- Center\n- ListView\n- Card\n- RawMaterialButton\n- Column\n- Row\n- AnimatedBuilder\n- OverflowBox\n- Transform\n- Icon\n\n### 相关链接\n本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦\n- [源码地址](https://github.com/xch1029/scroll-animation)\n- [博客本文地址](https://jser.tech/2019/07/11/flutter-scroll-animation)\n- [掘金本文地址](https://juejin.im/post/5d26e4fff265da1b7c614326)\n\n","source":"_posts/flutter-scroll-animation.md","raw":"---\ntitle: Flutter滚动动画\ndate: 2019-07-11 11:55:41\ntags: flutter\n---\n\n> 现在的Flutter正是如火中天，昨天Google官方正式发布了`Flutter1.7`版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。\n\n本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:\n<img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\" />\n\n### 思路\n列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动\n\n### 入口文件\nFlutter的项目都是从`lib/main.dart`开始：\n\n``` dart\nimport 'package:flutter/material.dart';\nimport 'demo-card.dart';\nimport 'items.dart';\nimport 'animated-bg.dart';\n\nvoid main() => runApp(AnimationDemo());\n\nclass AnimationDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Demo',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: MyHomePage(title: '列表滚动'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  ScrollController _controller = new ScrollController();\n\n  List<DemoCard> get _cards =>\n      items.map((Item _item) => DemoCard(_item)).toList();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(title: Text(widget.title)),\n      body: Stack(\n        alignment: AlignmentDirectional.topStart,\n        children: <Widget>[\n          AnimatedBackground(controller: _controller),\n          Center(\n            child: ListView(controller: _controller, children: _cards),\n          )\n        ],\n      ),\n    );\n  }\n}\n\n```\n在`main.dart`文件中，有几个import进来的文件：\n- `demo-card.dart` 卡片widget，列表就是循环的这个widget\n- `items.dart` 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求\n- `animated-bg.dart` 背景齿轮的widget\n\n\n这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，\n另外，列表渲染的时候需要注意下，我们会使用`ScrollController _controller = new ScrollController();`从而获取垂直方向滚动的距离\n\n### 卡片的mock数据\n为了省事，我们直接将数据放在`lib/items.dart`里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nclass Item {\n  String name;\n  MaterialColor color;\n  IconData icon;\n  Item(this.name, this.color, this.icon);\n}\n\nList<Item> items = [\n  Item('壹', Colors.amber, Icons.adjust),\n  Item('贰', Colors.cyan, Icons.airport_shuttle),\n  Item('叁', Colors.indigo, Icons.android),\n  Item('肆', Colors.green, Icons.beach_access),\n  Item('伍', Colors.pink, Icons.attach_file),\n  Item('陸', Colors.blue, Icons.bug_report)\n];\n\n```\n三个字段：\n- name 卡片左边的名字\n- color 卡片的背景颜色\n- icon 卡片右边的图标\n\n### 卡片Widget\n我们在`main.dart`里这么生成列表的children：`items.map((Item _item) => DemoCard(_item)).toList();`对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'items.dart';\n\nclass DemoCard extends StatelessWidget {\n  DemoCard(this.item);\n  final Item item;\n\n  static final Shadow _shadow =\n      Shadow(offset: Offset(2.0, 2.0), color: Colors.black26);\n  final TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(\n        side: BorderSide(width: 1, color: Colors.black26),\n        borderRadius: BorderRadius.circular(32),\n      ),\n      color: item.color.withOpacity(.7),\n      child: Container(\n        constraints: BoxConstraints.expand(height: 256),\n        child: RawMaterialButton(\n          onPressed: () {},\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: <Widget>[\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\n                children: <Widget>[\n                  Text(item.name, style: _style.copyWith(fontSize: 64)),\n                  Icon(item.icon, color: Colors.white70, size: 72),\n                ],\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：\n```\nDemoCard(this.item);\nfinal Item item;\n```\n使用Card组件可以快速的还原一张卡片样式\n- `elevation`参数控制卡片悬浮高度\n- `shape`参数控制卡片圆角\n- `color`参数控制卡片背景，`item.color.withOpacity(.7)`让背景透明化30%\n\n然后就是使用Column和Row来控制布局的展示\n\n### 背景齿轮的转动\n先看下背景组件的源码，再一一解释：\n``` dart\nimport 'package:flutter/material.dart';\n\nclass AnimatedBackground extends StatefulWidget {\n  AnimatedBackground({Key key, this.controller}) : super(key: key);\n\n  final ScrollController controller;\n\n  @override\n  _AnimatedBackgroundState createState() => _AnimatedBackgroundState();\n}\n\nclass _AnimatedBackgroundState extends State<AnimatedBackground> {\n  get offset => widget.controller.hasClients ? widget.controller.offset : 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: widget.controller,\n      builder: (BuildContext context, Widget child) {\n        return OverflowBox(\n          maxWidth: double.infinity,\n          alignment: Alignment(4, 3),\n          child: Transform.rotate(\n            angle: offset / -512,\n            child: Icon(Icons.settings, size: 512, color: Colors.white),\n          ),\n        );\n      },\n    );\n  }\n}\n\n```\n这个`controller`是在main.dart里传下来的，它是ListView的controller，我们用`widget.controller.offset`即可拿到垂直方向上的滚动距离。\n列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用`AnimatedBuilder`组件，组件有两个重要参数:\n- animation 将widget.controller传给animation\n- builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果\n\nOverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用`Alignment(4, 3)`将齿轮定位到屏幕左下方。\n让齿轮真正动起来的是`Transform.rotate`组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:`angle: offset / -512`\n- 为什么是512呢，因为我们的齿轮的`size: 512`\n- 为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动\n\n### 用到的Widget\n篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦\n- MaterialApp\n- Scaffold\n- AppBar\n- Stack\n- Center\n- ListView\n- Card\n- RawMaterialButton\n- Column\n- Row\n- AnimatedBuilder\n- OverflowBox\n- Transform\n- Icon\n\n### 相关链接\n本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦\n- [源码地址](https://github.com/xch1029/scroll-animation)\n- [博客本文地址](https://jser.tech/2019/07/11/flutter-scroll-animation)\n- [掘金本文地址](https://juejin.im/post/5d26e4fff265da1b7c614326)\n\n","slug":"flutter-scroll-animation","published":1,"updated":"2019-07-15T01:41:40.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyo234qv000ztot2jupkcwcz","content":"<blockquote>\n<p>现在的Flutter正是如火中天，昨天Google官方正式发布了<code>Flutter1.7</code>版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。</p>\n</blockquote>\n<p>本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:<br><img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动</p>\n<h3 id=\"入口文件\"><a href=\"#入口文件\" class=\"headerlink\" title=\"入口文件\"></a>入口文件</h3><p>Flutter的项目都是从<code>lib/main.dart</code>开始：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'demo-card.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'animated-bg.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(AnimationDemo());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Flutter Demo'</span>,</span><br><span class=\"line\">      theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">'列表滚动'</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  ScrollController _controller = <span class=\"keyword\">new</span> ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;DemoCard&gt; <span class=\"keyword\">get</span> _cards =&gt;</span><br><span class=\"line\">      items.map((Item _item) =&gt; DemoCard(_item)).toList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      backgroundColor: Colors.black,</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.title)),</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        alignment: AlignmentDirectional.topStart,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          AnimatedBackground(controller: _controller),</span><br><span class=\"line\">          Center(</span><br><span class=\"line\">            child: ListView(controller: _controller, children: _cards),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.dart</code>文件中，有几个import进来的文件：</p>\n<ul>\n<li><code>demo-card.dart</code> 卡片widget，列表就是循环的这个widget</li>\n<li><code>items.dart</code> 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求</li>\n<li><code>animated-bg.dart</code> 背景齿轮的widget</li>\n</ul>\n<p>这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，<br>另外，列表渲染的时候需要注意下，我们会使用<code>ScrollController _controller = new ScrollController();</code>从而获取垂直方向滚动的距离</p>\n<h3 id=\"卡片的mock数据\"><a href=\"#卡片的mock数据\" class=\"headerlink\" title=\"卡片的mock数据\"></a>卡片的mock数据</h3><p>为了省事，我们直接将数据放在<code>lib/items.dart</code>里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  MaterialColor color;</span><br><span class=\"line\">  IconData icon;</span><br><span class=\"line\">  Item(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.color, <span class=\"keyword\">this</span>.icon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Item&gt; items = [</span><br><span class=\"line\">  Item(<span class=\"string\">'壹'</span>, Colors.amber, Icons.adjust),</span><br><span class=\"line\">  Item(<span class=\"string\">'贰'</span>, Colors.cyan, Icons.airport_shuttle),</span><br><span class=\"line\">  Item(<span class=\"string\">'叁'</span>, Colors.indigo, Icons.android),</span><br><span class=\"line\">  Item(<span class=\"string\">'肆'</span>, Colors.green, Icons.beach_access),</span><br><span class=\"line\">  Item(<span class=\"string\">'伍'</span>, Colors.pink, Icons.attach_file),</span><br><span class=\"line\">  Item(<span class=\"string\">'陸'</span>, Colors.blue, Icons.bug_report)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>三个字段：</p>\n<ul>\n<li>name 卡片左边的名字</li>\n<li>color 卡片的背景颜色</li>\n<li>icon 卡片右边的图标</li>\n</ul>\n<h3 id=\"卡片Widget\"><a href=\"#卡片Widget\" class=\"headerlink\" title=\"卡片Widget\"></a>卡片Widget</h3><p>我们在<code>main.dart</code>里这么生成列表的children：<code>items.map((Item _item) =&gt; DemoCard(_item)).toList();</code>对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  DemoCard(<span class=\"keyword\">this</span>.item);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Item item;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Shadow _shadow =</span><br><span class=\"line\">      Shadow(offset: Offset(<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>), color: Colors.black26);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Card(</span><br><span class=\"line\">      elevation: <span class=\"number\">3</span>,</span><br><span class=\"line\">      shape: RoundedRectangleBorder(</span><br><span class=\"line\">        side: BorderSide(width: <span class=\"number\">1</span>, color: Colors.black26),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(<span class=\"number\">32</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      color: item.color.withOpacity(<span class=\"number\">.7</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        constraints: BoxConstraints.expand(height: <span class=\"number\">256</span>),</span><br><span class=\"line\">        child: RawMaterialButton(</span><br><span class=\"line\">          onPressed: () &#123;&#125;,</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Row(</span><br><span class=\"line\">                mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Text(item.name, style: _style.copyWith(fontSize: <span class=\"number\">64</span>)),</span><br><span class=\"line\">                  Icon(item.icon, color: Colors.white70, size: <span class=\"number\">72</span>),</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoCard(this.item);</span><br><span class=\"line\">final Item item;</span><br></pre></td></tr></table></figure></p>\n<p>使用Card组件可以快速的还原一张卡片样式</p>\n<ul>\n<li><code>elevation</code>参数控制卡片悬浮高度</li>\n<li><code>shape</code>参数控制卡片圆角</li>\n<li><code>color</code>参数控制卡片背景，<code>item.color.withOpacity(.7)</code>让背景透明化30%</li>\n</ul>\n<p>然后就是使用Column和Row来控制布局的展示</p>\n<h3 id=\"背景齿轮的转动\"><a href=\"#背景齿轮的转动\" class=\"headerlink\" title=\"背景齿轮的转动\"></a>背景齿轮的转动</h3><p>先看下背景组件的源码，再一一解释：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedBackground</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  AnimatedBackground(&#123;Key key, <span class=\"keyword\">this</span>.controller&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> ScrollController controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedBackgroundState createState() =&gt; _AnimatedBackgroundState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedBackgroundState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedBackground</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> offset =&gt; widget.controller.hasClients ? widget.controller.offset : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AnimatedBuilder(</span><br><span class=\"line\">      animation: widget.controller,</span><br><span class=\"line\">      builder: (BuildContext context, Widget child) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OverflowBox(</span><br><span class=\"line\">          maxWidth: <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">          alignment: Alignment(<span class=\"number\">4</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          child: Transform.rotate(</span><br><span class=\"line\">            angle: offset / <span class=\"number\">-512</span>,</span><br><span class=\"line\">            child: Icon(Icons.settings, size: <span class=\"number\">512</span>, color: Colors.white),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>controller</code>是在main.dart里传下来的，它是ListView的controller，我们用<code>widget.controller.offset</code>即可拿到垂直方向上的滚动距离。<br>列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用<code>AnimatedBuilder</code>组件，组件有两个重要参数:</p>\n<ul>\n<li>animation 将widget.controller传给animation</li>\n<li>builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果</li>\n</ul>\n<p>OverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用<code>Alignment(4, 3)</code>将齿轮定位到屏幕左下方。<br>让齿轮真正动起来的是<code>Transform.rotate</code>组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:<code>angle: offset / -512</code></p>\n<ul>\n<li>为什么是512呢，因为我们的齿轮的<code>size: 512</code></li>\n<li>为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动</li>\n</ul>\n<h3 id=\"用到的Widget\"><a href=\"#用到的Widget\" class=\"headerlink\" title=\"用到的Widget\"></a>用到的Widget</h3><p>篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦</p>\n<ul>\n<li>MaterialApp</li>\n<li>Scaffold</li>\n<li>AppBar</li>\n<li>Stack</li>\n<li>Center</li>\n<li>ListView</li>\n<li>Card</li>\n<li>RawMaterialButton</li>\n<li>Column</li>\n<li>Row</li>\n<li>AnimatedBuilder</li>\n<li>OverflowBox</li>\n<li>Transform</li>\n<li>Icon</li>\n</ul>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦</p>\n<ul>\n<li><a href=\"https://github.com/xch1029/scroll-animation\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n<li><a href=\"https://jser.tech/2019/07/11/flutter-scroll-animation\" target=\"_blank\" rel=\"noopener\">博客本文地址</a></li>\n<li><a href=\"https://juejin.im/post/5d26e4fff265da1b7c614326\" target=\"_blank\" rel=\"noopener\">掘金本文地址</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>现在的Flutter正是如火中天，昨天Google官方正式发布了<code>Flutter1.7</code>版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。</p>\n</blockquote>\n<p>本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:<br><img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动</p>\n<h3 id=\"入口文件\"><a href=\"#入口文件\" class=\"headerlink\" title=\"入口文件\"></a>入口文件</h3><p>Flutter的项目都是从<code>lib/main.dart</code>开始：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'demo-card.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'animated-bg.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(AnimationDemo());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Flutter Demo'</span>,</span><br><span class=\"line\">      theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">'列表滚动'</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  ScrollController _controller = <span class=\"keyword\">new</span> ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;DemoCard&gt; <span class=\"keyword\">get</span> _cards =&gt;</span><br><span class=\"line\">      items.map((Item _item) =&gt; DemoCard(_item)).toList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      backgroundColor: Colors.black,</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.title)),</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        alignment: AlignmentDirectional.topStart,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          AnimatedBackground(controller: _controller),</span><br><span class=\"line\">          Center(</span><br><span class=\"line\">            child: ListView(controller: _controller, children: _cards),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.dart</code>文件中，有几个import进来的文件：</p>\n<ul>\n<li><code>demo-card.dart</code> 卡片widget，列表就是循环的这个widget</li>\n<li><code>items.dart</code> 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求</li>\n<li><code>animated-bg.dart</code> 背景齿轮的widget</li>\n</ul>\n<p>这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，<br>另外，列表渲染的时候需要注意下，我们会使用<code>ScrollController _controller = new ScrollController();</code>从而获取垂直方向滚动的距离</p>\n<h3 id=\"卡片的mock数据\"><a href=\"#卡片的mock数据\" class=\"headerlink\" title=\"卡片的mock数据\"></a>卡片的mock数据</h3><p>为了省事，我们直接将数据放在<code>lib/items.dart</code>里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  MaterialColor color;</span><br><span class=\"line\">  IconData icon;</span><br><span class=\"line\">  Item(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.color, <span class=\"keyword\">this</span>.icon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Item&gt; items = [</span><br><span class=\"line\">  Item(<span class=\"string\">'壹'</span>, Colors.amber, Icons.adjust),</span><br><span class=\"line\">  Item(<span class=\"string\">'贰'</span>, Colors.cyan, Icons.airport_shuttle),</span><br><span class=\"line\">  Item(<span class=\"string\">'叁'</span>, Colors.indigo, Icons.android),</span><br><span class=\"line\">  Item(<span class=\"string\">'肆'</span>, Colors.green, Icons.beach_access),</span><br><span class=\"line\">  Item(<span class=\"string\">'伍'</span>, Colors.pink, Icons.attach_file),</span><br><span class=\"line\">  Item(<span class=\"string\">'陸'</span>, Colors.blue, Icons.bug_report)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>三个字段：</p>\n<ul>\n<li>name 卡片左边的名字</li>\n<li>color 卡片的背景颜色</li>\n<li>icon 卡片右边的图标</li>\n</ul>\n<h3 id=\"卡片Widget\"><a href=\"#卡片Widget\" class=\"headerlink\" title=\"卡片Widget\"></a>卡片Widget</h3><p>我们在<code>main.dart</code>里这么生成列表的children：<code>items.map((Item _item) =&gt; DemoCard(_item)).toList();</code>对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  DemoCard(<span class=\"keyword\">this</span>.item);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Item item;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Shadow _shadow =</span><br><span class=\"line\">      Shadow(offset: Offset(<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>), color: Colors.black26);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Card(</span><br><span class=\"line\">      elevation: <span class=\"number\">3</span>,</span><br><span class=\"line\">      shape: RoundedRectangleBorder(</span><br><span class=\"line\">        side: BorderSide(width: <span class=\"number\">1</span>, color: Colors.black26),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(<span class=\"number\">32</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      color: item.color.withOpacity(<span class=\"number\">.7</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        constraints: BoxConstraints.expand(height: <span class=\"number\">256</span>),</span><br><span class=\"line\">        child: RawMaterialButton(</span><br><span class=\"line\">          onPressed: () &#123;&#125;,</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Row(</span><br><span class=\"line\">                mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Text(item.name, style: _style.copyWith(fontSize: <span class=\"number\">64</span>)),</span><br><span class=\"line\">                  Icon(item.icon, color: Colors.white70, size: <span class=\"number\">72</span>),</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoCard(this.item);</span><br><span class=\"line\">final Item item;</span><br></pre></td></tr></table></figure></p>\n<p>使用Card组件可以快速的还原一张卡片样式</p>\n<ul>\n<li><code>elevation</code>参数控制卡片悬浮高度</li>\n<li><code>shape</code>参数控制卡片圆角</li>\n<li><code>color</code>参数控制卡片背景，<code>item.color.withOpacity(.7)</code>让背景透明化30%</li>\n</ul>\n<p>然后就是使用Column和Row来控制布局的展示</p>\n<h3 id=\"背景齿轮的转动\"><a href=\"#背景齿轮的转动\" class=\"headerlink\" title=\"背景齿轮的转动\"></a>背景齿轮的转动</h3><p>先看下背景组件的源码，再一一解释：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedBackground</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  AnimatedBackground(&#123;Key key, <span class=\"keyword\">this</span>.controller&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> ScrollController controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedBackgroundState createState() =&gt; _AnimatedBackgroundState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedBackgroundState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedBackground</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> offset =&gt; widget.controller.hasClients ? widget.controller.offset : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AnimatedBuilder(</span><br><span class=\"line\">      animation: widget.controller,</span><br><span class=\"line\">      builder: (BuildContext context, Widget child) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OverflowBox(</span><br><span class=\"line\">          maxWidth: <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">          alignment: Alignment(<span class=\"number\">4</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          child: Transform.rotate(</span><br><span class=\"line\">            angle: offset / <span class=\"number\">-512</span>,</span><br><span class=\"line\">            child: Icon(Icons.settings, size: <span class=\"number\">512</span>, color: Colors.white),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>controller</code>是在main.dart里传下来的，它是ListView的controller，我们用<code>widget.controller.offset</code>即可拿到垂直方向上的滚动距离。<br>列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用<code>AnimatedBuilder</code>组件，组件有两个重要参数:</p>\n<ul>\n<li>animation 将widget.controller传给animation</li>\n<li>builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果</li>\n</ul>\n<p>OverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用<code>Alignment(4, 3)</code>将齿轮定位到屏幕左下方。<br>让齿轮真正动起来的是<code>Transform.rotate</code>组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:<code>angle: offset / -512</code></p>\n<ul>\n<li>为什么是512呢，因为我们的齿轮的<code>size: 512</code></li>\n<li>为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动</li>\n</ul>\n<h3 id=\"用到的Widget\"><a href=\"#用到的Widget\" class=\"headerlink\" title=\"用到的Widget\"></a>用到的Widget</h3><p>篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦</p>\n<ul>\n<li>MaterialApp</li>\n<li>Scaffold</li>\n<li>AppBar</li>\n<li>Stack</li>\n<li>Center</li>\n<li>ListView</li>\n<li>Card</li>\n<li>RawMaterialButton</li>\n<li>Column</li>\n<li>Row</li>\n<li>AnimatedBuilder</li>\n<li>OverflowBox</li>\n<li>Transform</li>\n<li>Icon</li>\n</ul>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦</p>\n<ul>\n<li><a href=\"https://github.com/xch1029/scroll-animation\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n<li><a href=\"https://jser.tech/2019/07/11/flutter-scroll-animation\" target=\"_blank\" rel=\"noopener\">博客本文地址</a></li>\n<li><a href=\"https://juejin.im/post/5d26e4fff265da1b7c614326\" target=\"_blank\" rel=\"noopener\">掘金本文地址</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyo234pb0002tot2cw4jb06a","category_id":"cjyo234pk0004tot2j0yf4eua","_id":"cjyo234pv000ctot27cx2e819"}],"PostTag":[{"post_id":"cjyo234pb0002tot2cw4jb06a","tag_id":"cjyo234pl0005tot2g3jwqx7b","_id":"cjyo234px000ftot2fo9b1jzq"},{"post_id":"cjyo234pb0002tot2cw4jb06a","tag_id":"cjyo234pq0009tot2wo50m3cn","_id":"cjyo234py000gtot2ljdyxifh"},{"post_id":"cjyo234ph0003tot2376pmo6z","tag_id":"cjyo234pv000dtot24lyhzz1d","_id":"cjyo234pz000itot2vv6w4mfj"},{"post_id":"cjyo234pm0006tot2u583ze8o","tag_id":"cjyo234py000htot2wnbmgwme","_id":"cjyo234q1000mtot2vr68z0cs"},{"post_id":"cjyo234pm0006tot2u583ze8o","tag_id":"cjyo234pz000jtot2r1on9nuy","_id":"cjyo234q2000ntot2w4ije7mn"},{"post_id":"cjyo234pm0006tot2u583ze8o","tag_id":"cjyo234q0000ktot27olalwlo","_id":"cjyo234q2000ptot26glokscn"},{"post_id":"cjyo234pp0008tot25mr9ygs4","tag_id":"cjyo234q1000ltot2z2yptdls","_id":"cjyo234q3000qtot2xmcexa9r"},{"post_id":"cjyo234pr000atot29r0xjlny","tag_id":"cjyo234q2000otot2bchiku34","_id":"cjyo234q5000ttot2gtvs7qhd"},{"post_id":"cjyo234pr000atot29r0xjlny","tag_id":"cjyo234q3000rtot2mjryd1nq","_id":"cjyo234q6000utot246hutonx"},{"post_id":"cjyo234ps000btot2rshkm9dv","tag_id":"cjyo234pv000dtot24lyhzz1d","_id":"cjyo234q7000wtot2gylzz2tg"},{"post_id":"cjyo234pw000etot23lp1996k","tag_id":"cjyo234q2000otot2bchiku34","_id":"cjyo234q8000xtot2krj3aoma"},{"post_id":"cjyo234qt000ytot216j4ff2g","tag_id":"cjyo234q2000otot2bchiku34","_id":"cjyo234qw0010tot2r0he5s4k"},{"post_id":"cjyo234qv000ztot2jupkcwcz","tag_id":"cjyo234q2000otot2bchiku34","_id":"cjyo234qx0011tot29fxjpv8k"}],"Tag":[{"name":"react","_id":"cjyo234pl0005tot2g3jwqx7b"},{"name":"ant-design","_id":"cjyo234pq0009tot2wo50m3cn"},{"name":"javascript","_id":"cjyo234pv000dtot24lyhzz1d"},{"name":"插件","_id":"cjyo234py000htot2wnbmgwme"},{"name":"浏览器","_id":"cjyo234pz000jtot2r1on9nuy"},{"name":"Chrome","_id":"cjyo234q0000ktot27olalwlo"},{"name":"git","_id":"cjyo234q1000ltot2z2yptdls"},{"name":"flutter","_id":"cjyo234q2000otot2bchiku34"},{"name":"UI","_id":"cjyo234q3000rtot2mjryd1nq"}]}}